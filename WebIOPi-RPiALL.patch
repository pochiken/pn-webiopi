diff -urN WebIOPi-0.7.1org/htdocs/index.html WebIOPi-0.7.1/htdocs/index.html
--- WebIOPi-0.7.1org/htdocs/index.html	2014-02-03 02:55:16.000000000 +0900
+++ WebIOPi-0.7.1/htdocs/index.html	2023-11-18 16:44:01.287516360 +0900
@@ -4,10 +4,18 @@
 	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
 	<meta name="viewport" content = "width = 420, user-scalable = no" /> 
 	<title>WebIOPi | Raspberry Pi IoT Framework</title>
+        <script type="text/javascript" src="/webiopi.js"></script>
+        <script type="text/javascript">
+        webiopi().ready(function() {
+                w().RPiInfo();
+        });
+        </script>
 </head>
 <body>
 
 <h1>WebIOPi Main Menu</h1>
+<h2><a>My Raspberry Pi Information</a></h2>
+<h4><div id="myinfo"></div></h4>
 
 <h2><a href="/app/gpio-header">GPIO Header</a></h2>
 <p>Control and Debug the Raspberry Pi GPIO with a display which looks like the physical header.</p>
diff -urN WebIOPi-0.7.1org/htdocs/webiopi.css WebIOPi-0.7.1/htdocs/webiopi.css
--- WebIOPi-0.7.1org/htdocs/webiopi.css	2014-02-01 05:02:27.000000000 +0900
+++ WebIOPi-0.7.1/htdocs/webiopi.css	2023-11-18 16:44:01.291516273 +0900
@@ -28,7 +28,7 @@
 }
 
 .DNC {
-	background-color: Gray;
+	background-color: Yellow;
 }
 
 .GND {
@@ -36,7 +36,7 @@
 }
 
 .V33 {
-	background-color: Orange;
+	background-color: Magenta;
 }
 
 .V50 {
@@ -44,11 +44,11 @@
 }
 
 .LOW {
-	background-color: Black;
+	background-color: DarkRed;
 }
 
 .HIGH {
-	background-color: Orange;
+	background-color: LightGreen;
 }
 
 .I2C {
@@ -60,11 +60,11 @@
 }
 
 .UART {
-	background-color: DarkBlue;
+	background-color: Orange;
 }
 
 .ONEWIRE {
-	background-color: Blue;
+	background-color: DarkBlue;
 }
 
 .FunctionBasic {
diff -urN WebIOPi-0.7.1org/htdocs/webiopi.js WebIOPi-0.7.1/htdocs/webiopi.js
--- WebIOPi-0.7.1org/htdocs/webiopi.js	2014-02-24 01:37:07.000000000 +0900
+++ WebIOPi-0.7.1/htdocs/webiopi.js	2023-11-18 14:46:09.756486264 +0900
@@ -1,1518 +1,1533 @@
-/*
-   Copyright 2012-2013 Eric Ptak - trouch.com
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-*/
-
-var _gaq = _gaq || [];
-var _webiopi;
-
-function w() {
-	if (_webiopi == undefined) {
-		_webiopi = new WebIOPi();
-	}
-	
-	return _webiopi;
-}
-
-function webiopi() {
-	return w();
-}
-
-/*
-function isMobileUserAgent(a) {
-	if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))
-			return true
-}
-
-var _isMobile = undefined;
-function isMobile() {
-	if (_isMobile == undefined) {
-		_isMobile = ((navigator.userAgent != undefined && isMobileUserAgent(navigator.userAgent))
-				|| (navigator.vendor != undefined && isMobileUserAgent(navigator.vendor)) 
-				|| (window.opera != undefined && isMobileUserAgent(window.opera)))
-	}
-	return _isMobile
-}
-*/
-
-var isTouchDevice = "ontouchstart" in document.documentElement ? true : false;
-var BUTTON_DOWN   = isTouchDevice ? "touchstart" : "mousedown";
-var BUTTON_UP     = isTouchDevice ? "touchend"   : "mouseup";
-
-/*
-var deviceAgent = navigator.userAgent.toLowerCase();
-if (deviceAgent.match(/(iphone|ipod|ipad)/) ||
-		deviceAgent.match(/(android)/)  || 
-		deviceAgent.match(/(iemobile)/) ||
-		deviceAgent.match(/iphone/i) ||
-		deviceAgent.match(/ipad/i) || 
-		deviceAgent.match(/ipod/i) || 
-		deviceAgent.match(/blackberry/i) ||
-		deviceAgent.match(/bada/i) ||
-	"ontouchstart" in document.documentElement
-	) {
-        isTouchDevice = true;
-		BUTTON_DOWN = "touchstart";
-		BUTTON_UP = "touchend";
-}
-*/
-
-
-function WebIOPi() {
-	this.readyCallback = null;
-	this.context = "/";
-	this.GPIO = Array(54);
-	this.PINS = Array(27);
-
-	this.TYPE = {
-			DNC: {value: 0, style: "DNC", label: "--"},
-			GND: {value: 1, style: "GND", label: "GROUND"},
-			V33: {value: 2, style: "V33", label: "3.3V"},
-			V50: {value: 3, style: "V50", label: "5.0V"},
-			GPIO: {value: 4, style: "GPIO", label: "GPIO"}
-	};
-	
-	this.ALT = {
-			I2C: {name: "I2C", enabled: false, gpios: []},
-			SPI: {name: "SPI", enabled: false, gpios: []},
-			UART: {name: "UART", enabled: false, gpios: []},
-			ONEWIRE: {name: "ONEWIRE", enabled: false, gpios: []}
-		};
-		
-	// init GPIOs
-	for (var i=0; i<this.GPIO.length; i++) {
-		var gpio = Object();
-		gpio.value = 0;
-		gpio.func = "IN";
-		gpio.mapped = false;
-		this.GPIO[i] = gpio;
-	}
-
-	// get context
-	var reg = new RegExp("http://" + window.location.host + "(.*)webiopi.js");
-	var scripts = document.getElementsByTagName("script");
-	for(var i = 0; i < scripts.length; i++) {
-		var res = reg.exec(scripts[i].src);
-		if (res && (res.length > 1)) {
-			script = scripts[i];
-			this.context = res[1];
-			
-		}
-	}
-
-	var head = document.getElementsByTagName('head')[0];
-
-	var jquery = document.createElement('script');
-	jquery.type = 'text/javascript';
-	jquery.src = '/jquery.js';
-//	if (!isMobile()) {
-		jquery.onload = function() {
-			w().init();
-		};
-//	}
-	head.appendChild(jquery);
-
-/*
-	if (isMobile()) {
-		console.log("load jquery mobile");
-		var mobile = document.createElement('script');
-		mobile.type = 'text/javascript';
-		mobile.src = '/jquery-mobile.js';
-		mobile.onload = function() {
-			w().initMobile()
-		};
-		head.appendChild(mobile);
-	}
-*/
-
-	// GA
-	_gaq.push(['_setAccount', 'UA-33979593-2']);
-	_gaq.push(['_trackPageview']);
-		
-	var ga = document.createElement('script');
-	ga.type = 'text/javascript';
-	ga.async = false;
-	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
-	head.appendChild(ga);
-	
-	var style = document.createElement('link');
-	style.rel = "stylesheet";
-	style.type = 'text/css';
-	style.href = '/webiopi.css';
-	head.appendChild(style);
-
-/*
-	if (isMobile()) {
-		var style = document.createElement('link');
-		style.rel = "stylesheet";
-		style.type = 'text/css';
-		style.href = '/jquery-mobile.css';
-		head.appendChild(style);
-	}
-*/
-	
-	// init ALTs
-	this.addALT(this.ALT.I2C, 0, "SDA");
-	this.addALT(this.ALT.I2C, 1, "SCL");
-	this.addALT(this.ALT.I2C, 2, "SDA");
-	this.addALT(this.ALT.I2C, 3, "SCL");
-
-	this.addALT(this.ALT.SPI,  7, "CE1");
-	this.addALT(this.ALT.SPI,  8, "CE0");
-	this.addALT(this.ALT.SPI,  9, "MISO");
-	this.addALT(this.ALT.SPI, 10, "MOSI");
-	this.addALT(this.ALT.SPI, 11, "SCLK");
-	
-	this.addALT(this.ALT.UART, 14, "TX");
-	this.addALT(this.ALT.UART, 15, "RX");
-	
-	this.addALT(this.ALT.ONEWIRE, 4, "");
-}
-
-WebIOPi.prototype.init = function() {
-	$.getJSON(w().context + "map", function(data) {
-		var count = w().PINS.length;
-		for (i = 0; i<count-1; i++) {
-			var type = w().TYPE.GPIO;
-			var label = data[i];
-			
-			if (label == "DNC") {
-				type = w().TYPE.DNC;
-			}
-			else if (label == "GND") {
-				type = w().TYPE.GND;
-			}
-			else if (label == "V33") {
-				type = w().TYPE.V33;
-			}
-			else if (label == "V50") {
-				type = w().TYPE.V50;
-			}
-			
-			if (type.value != w().TYPE.GPIO.value) {
-				label = type.label;
-			}
-			
-			w().map(i+1, type, label);
-		}
-		if (w().readyCallback != null) {
-			w().readyCallback();
-		}
-
-		w().checkVersion();
-	});
-}
-
-/*
-WebIOPi.prototype.initMobile = function() {
-	webiopi().init();
-}
-*/
-
-WebIOPi.prototype.ready = function (cb) {
-	w().readyCallback = cb;
-}
-
-WebIOPi.prototype.map = function (pin, type, value) {
-	w().PINS[pin] = Object();
-	w().PINS[pin].type = type
-	w().PINS[pin].value = value;
-	
-	if (type.value == w().TYPE.GPIO.value) {
-		w().GPIO[value].mapped = true;
-	}
-}
-
-WebIOPi.prototype.addALT = function (alt, gpio, name) {
-	var o = Object();
-	o.gpio = gpio;
-	o.name = name;
-	alt.gpios.push(o);
-}
-
-WebIOPi.prototype.updateValue = function (gpio, value) {
-	w().GPIO[gpio].value = value;
-	var style = (value == 1) ? "HIGH" : "LOW";
-	$("#gpio"+gpio).attr("class", style);
-}
-
-WebIOPi.prototype.updateFunction = function (gpio, func) {
-	w().GPIO[gpio].func = func;
-	$("#function"+gpio).val(func);
-	$("#function"+gpio).text(func);
-}
-
-WebIOPi.prototype.updateSlider = function (gpio, slider, value) {
-	$("#"+slider+gpio).val(value);
-}
-
-WebIOPi.prototype.updateALT = function (alt, enable) {
-	for (var p in alt.gpios) {
-		gpio = alt.gpios[p].gpio;
-		$("#description"+gpio).empty();
-		if (enable) {
-			$("#description"+gpio).append(alt.name + " " + alt.gpios[p].name);
-			$("#gpio"+gpio).attr("class", alt.name);
-			$("#function"+gpio).attr("class", "FunctionSpecial");
-		}
-		else {
-			$("#description"+gpio).append("GPIO " + gpio);
-			$("#gpio"+gpio).attr("class", "");
-			$("#function"+gpio).attr("class", "FunctionBasic");
-		}
-	}
-	alt.enabled = enable;
-}
-
-WebIOPi.prototype.refreshGPIO = function (repeat) {
-	$.getJSON(w().context + "*", function(data) {
-		w().updateALT(w().ALT.I2C, data["I2C"]);
-		w().updateALT(w().ALT.SPI, data["SPI"]);
-		w().updateALT(w().ALT.UART, data["UART"]);
-		w().updateALT(w().ALT.ONEWIRE, data["ONEWIRE"]);
-		
-		$.each(data["GPIO"], function(gpio, data) {
-	    	w().updateFunction(gpio, data["function"]);
-	    	if ( ((gpio != 4) && ((data["function"] == "IN") || (data["function"] == "OUT"))
-	    		|| ((gpio == 4) && (w().ALT.ONEWIRE["enabled"] == false)))){
-	    		w().updateValue(gpio, data["value"]);
-	    	}
-	    	else if (data["function"] == "PWM") {
-	    		w().updateSlider(gpio, "ratio", data["ratio"]);
-	    		w().updateSlider(gpio, "angle", data["angle"]);
-	    	}
-	    	
-		});
-	});
-	if (repeat === true) {
-		setTimeout(function(){w().refreshGPIO(repeat)}, 1000);
-	}
-}
-
-
-WebIOPi.prototype.checkVersion = function () {
-	var version;
-	
-	$.get(w().context + "version", function(data) {
-		_gaq.push(['_trackEvent', 'version', data]);
-//		version = data.split("/")[2];
-//
-//		$.get("http://webiopi.trouch.com/version.php", function(data) {
-//			var lines = data.split("\n");
-//			var c = version.split(".");
-//			var n = lines[0].split(".");
-//			var updated = false;
-//			for (i=0; i<Math.min(c.length, n.length); i++) {
-//				if (n[i]>c[i]) {
-//					updated = true;
-//				}
-//			}
-//			if (updated || (n.length > c.length)) {
-//				var div = $('<div id="update"><a href="' + lines[1] + '">Update available</a></div>');
-//				$("body").append(div);
-//			}
-//		});
-	});
-}
-
-WebIOPi.prototype.digitalRead = function (gpio, callback) {
-	if (callback != undefined) {
-		$.get(w().context + 'GPIO/' + gpio + "/value", function(data) {
-			w().updateValue(gpio, data);
-			callback(gpio, data);
-		});
-	}
-	return w().GPIO[gpio].value;
-}
-
-WebIOPi.prototype.digitalWrite = function (gpio, value, callback) {
-	if (w().GPIO[gpio].func.toUpperCase()=="OUT") {
-		$.post(w().context + 'GPIO/' + gpio + "/value/" + value, function(data) {
-			w().updateValue(gpio, data);
-			if (callback != undefined) {
-				callback(gpio, data);
-			}
-		});
-	}
-	else {
-		//console.log(w().GPIO[gpio].func);
-	}
-}
-
-WebIOPi.prototype.getFunction = function (gpio, callback) {
-	if (callback != undefined) {
-		$.get(w().context + 'GPIO/' + gpio + "/function", function(data) {
-			w().updateFunction(gpio, data);
-			callback(gpio, data);
-		});
-	}
-	return w().GPIO[gpio].func;
-}
-WebIOPi.prototype.setFunction = function (gpio, func, callback) {
-	$.post(w().context + 'GPIO/' + gpio + "/function/" + func, function(data) {
-		w().updateFunction(gpio, data);
-		if (callback != undefined) {
-			callback(gpio, data);
-		}
-	});
-}
-
-WebIOPi.prototype.toggleValue = function (gpio) {
-	var value = (w().GPIO[gpio].value == 1) ? 0 : 1;
-	w().digitalWrite(gpio, value);
-}
-
-WebIOPi.prototype.toggleFunction = function (gpio) {
-	var value = (w().GPIO[gpio].func == "IN") ? "OUT" : "IN";
-	w().setFunction(gpio, value)
-}
-
-WebIOPi.prototype.outputSequence = function (gpio, period, sequence, callback) {
-	$.post(w().context + 'GPIO/' + gpio + "/sequence/" + period + "," + sequence, function(data) {
-		w().updateValue(gpio, data);
-		if (callback != undefined) {
-			callback(gpio, data);
-		}
-	});
-}
-
-WebIOPi.prototype.callMacro = function (macro, args, callback) {
-	if (args == undefined) {
-		args = "";
-	}
-	$.post(w().context + 'macros/' + macro + "/" + args, function(data) {
-		if (callback != undefined) {
-			callback(macro, args, data);
-		}
-	});
-}
-
-WebIOPi.prototype.enablePWM = function(gpio, callback) {
-	$.post(w().context + 'GPIO/' + gpio + "/pwm/enable", function(data) {
-		if (callback != undefined) {
-			callback(gpio, data);
-		}
-	});
-}
-
-WebIOPi.prototype.disablePWM = function(gpio, callback) {
-	$.post(w().context + 'GPIO/' + gpio + "/pwm/disable", function(data) {
-		if (callback != undefined) {
-			callback(gpio, data);
-		}
-	});
-}
-
-WebIOPi.prototype.pulse = function(gpio, callback) {
-	$.post(w().context + 'GPIO/' + gpio + "/pulse/", function(data) {
-		if (callback != undefined) {
-			callback(gpio, data);
-		}
-	});
-}
-
-WebIOPi.prototype.pulseRatio = function(gpio, ratio, callback) {
-	$.post(w().context + 'GPIO/' + gpio + "/pulseRatio/" + ratio, function(data) {
-		if (callback != undefined) {
-			callback(gpio, data);
-		}
-	});
-}
-
-WebIOPi.prototype.pulseAngle = function(gpio, angle, callback) {
-	$.post(w().context + 'GPIO/' + gpio + "/pulseAngle/" + angle, function(data) {
-		if (callback != undefined) {
-			callback(gpio, data);
-		}
-	});
-}
-
-WebIOPi.prototype.setLabel = function (id, label) {
-	$("#" + id).val(label);
-	$("#" + id).text(label);
-}
-
-WebIOPi.prototype.setClass = function (id, cssClass) {
-	$("#" + id).attr("class", cssClass);
-}
-
-WebIOPi.prototype.createButton = function (id, label, callback, callbackUp) {
-	var button = $('<button type="button" class="Default">');
-	button.attr("id", id);
-	button.text(label);
-	if (callback != undefined) {
-		button.bind(BUTTON_DOWN, callback);
-	}
-	if (callbackUp != undefined) {
-		button.bind(BUTTON_UP, callbackUp);
-	}
-	return button;
-}
-
-WebIOPi.prototype.createGPIOButton = function (gpio, label) {
-	var button = w().createButton("gpio" + gpio, label);
-	button.bind(BUTTON_DOWN, function(event) {
-		w().toggleValue(gpio);
-	});
-	return button;
-}
-
-WebIOPi.prototype.createFunctionButton = function (gpio) {
-	var button = w().createButton("function" + gpio, " ");
-	button.attr("class", "FunctionBasic");
-	button.bind(BUTTON_DOWN, function(event) {
-		w().toggleFunction(gpio);
-	});
-	return button;
-}
-
-WebIOPi.prototype.createPulseButton = function (id, label, gpio) {
-    var button = webiopi().createButton(id, label);
-    button.bind(BUTTON_DOWN, function(event) {
-        webiopi().pulse(gpio);
-    });
-    return button;
-}
-
-WebIOPi.prototype.createMacroButton = function (id, label, macro, args) {
-    var button = webiopi().createButton(id, label);
-    button.bind(BUTTON_DOWN, function(event) {
-        webiopi().callMacro(macro, args);
-    });
-    return button;
-}
-
-WebIOPi.prototype.createSequenceButton = function (id, label, gpio, period, sequence) {
-    var button = webiopi().createButton(id, label);
-    button.bind(BUTTON_DOWN, function(event) {
-        webiopi().outputSequence(gpio, period, sequence);
-    });
-    return button;
-}
-
-WebIOPi.prototype.createRatioSlider = function(gpio) {
-	var slider = $('<input type="range" min="0.0" max="1.0" step="0.01">');
-	slider.attr("id", "ratio"+gpio);
-	slider.bind("change", function() {
-		w().pulseRatio(gpio, slider.val());
-	});
-	return slider;
-}
-
-WebIOPi.prototype.createAngleSlider = function(gpio) {
-	var slider = $('<input type="range" min="-45" max="45" step="1">');
-	slider.attr("id", "angle"+gpio);
-	slider.bind("change", function() {
-		w().pulseAngle(gpio, slider.val());
-	});
-	return slider;
-}
-
-WebIOPi.prototype.RPiHeader = function () {
-	if (w()._header == undefined) {
-		w()._header = new RPiHeader();
-	}
-	return w()._header;
-}
-
-function RPiHeader() {
-
-}
-
-RPiHeader.prototype.getPinCell = function (pin) {
-	var cell = $('<td align="center">');
-	var button;
-	if (w().PINS[pin].type.value == w().TYPE.GPIO.value) {
-		button = w().createGPIOButton(w().PINS[pin].value, pin);
-	}
-	else {
-		var button = $('<button type="button">');
-		button.val(pin);
-		button.text(pin);
-		button.attr("class", w().PINS[pin].type.style);
-	}
-	cell.append(button);
-	return cell;
-}
-
-RPiHeader.prototype.getDescriptionCell = function (pin, align) {
-	var cell = $('<td>');
-	cell.attr("align", align);
-	
-	var div = $('<div>');
-	div.attr("class", "Description");
-	if (w().PINS[pin].type.value != w().TYPE.GPIO.value) {
-		div.append(w().PINS[pin].value);
-	}
-	else {
-		div.attr("id", "description"+w().PINS[pin].value);
-		div.append("GPIO " + w().PINS[pin].value);
-	}
-	
-	cell.append(div);
-
-	return cell;
-}
-
-RPiHeader.prototype.getFunctionCell = function (pin) {
-	var cell = $('<td align="center">');
-	if (w().PINS[pin].type.value == w().TYPE.GPIO.value) {
-		var button = w().createFunctionButton(w().PINS[pin].value);
-		cell.append(button);
-	}
-	return cell;
-}
-
-RPiHeader.prototype.createTable = function (containerId) {
-	var table = $("<table>");
-	table.attr("id", "RPiHeader")
-	for (var pin=1; pin<=26; pin++) {
-		var line = 	$('<tr>');
-		line.append(this.getFunctionCell(pin))
-		line.append(this.getDescriptionCell(pin, "right"))
-		line.append(this.getPinCell(pin));
-
-		pin++;
-		line.append(this.getPinCell(pin));
-		line.append(this.getDescriptionCell(pin, "left"))
-		line.append(this.getFunctionCell(pin))
-
-		table.append(line);
-	}
-	
-	if (containerId != undefined) {
-		$("#"+containerId).append(table);
-	}
-	
-	return table;
-}
-
-WebIOPi.prototype.Expert = function () {
-	if (w()._expert == undefined) {
-		w()._expert = new Expert();
-	}
-	return w()._expert;
-}
-
-function Expert() {
-	
-}
-
-Expert.prototype.createGPIO = function (gpio) {
-	var box = $("<div>");
-	box.append(w().createFunctionButton(gpio));
-	box.append(w().createGPIOButton(gpio, gpio));
-
-	div = $('<div>');
-	div.attr("id", "description"+gpio);
-	div.attr("class", "Description");
-	div.append("GPIO " + gpio);
-	box.append(div);
-
-	return box;
-}
-
-Expert.prototype.createList = function (containerId) {
-	var box = $('<div>');
-	
-	for (i = 0; i<w().GPIO.length; i++) {
-		if (w().GPIO[i].mapped == true) {
-			var gpio = w().Expert().createGPIO(i);
-			box.append(gpio);
-		}
-	}
-		
-	if (containerId != undefined) {
-		$("#"+containerId).append(box);
-	}
-	
-	return box;
-} 
-
-WebIOPi.prototype.Serial = function(device) {
-	return new Serial(device);
-}
-
-function Serial(device) {
-	this.device = device;
-	this.url = "/devices/" + device
-}
-
-Serial.prototype.write = function(data) {
-	$.post(this.url, data);
-} 
-
-Serial.prototype.read = function(callback) {
-	$.get(this.url, callback);
-}
-
-WebIOPi.prototype.newDevice = function(type, name) {
-	if (type == "ADC") {
-		return new ADC(name);
-	}
-	
-	if (type == "DAC") {
-		return new DAC(name);
-	}
-
-	if (type == "PWM") {
-		return new PWM(name);
-	}
-
-	if (type == "GPIOPort") {
-		return new GPIOPort(name);
-	}
-
-	if (type == "Temperature") {
-		return new Temperature(name);
-	}
-
-	if (type == "Pressure") {
-		return new Pressure(name);
-	}
-
-	if (type == "Luminosity") {
-		return new Luminosity(name);
-	}
-
-	if (type == "Distance") {
-		return new Distance(name);
-	}
-	
-	if (type == "PiFaceDigital") {
-		return new PiFaceDigital(name);
-	}
-
-	if (type == "Humidity") {
-		return new Humidity(name);
-	}
-
-	return undefined;
-}
-
-function GPIOPort(name) {
-	this.name = name;
-	this.url = "/devices/" + name;
-	this.onready = null;
-	this.channelCount = 0;
-	this.refreshTime = 1000;
-
-	var port = this;
-	$.get(this.url + "/count", function(data) {
-		port.channelCount = parseInt(data);
-	});
-
-}
-
-GPIOPort.prototype.isReady = function() {
-	return (this.channelCount > 0);
-}
-
-GPIOPort.prototype.toString = function() {
-	if (this.channelCount > 0)
-		return this.name + ": GPIO Port (" + this.channelCount + "-bits)";
-	return this.name + ": GPIO Port";
-}
-
-GPIOPort.prototype.digitalRead = function(channel, callback) {
-	var name = this.name;
-	$.get(this.url + "/" + channel + "/value", function(data) {
-		callback(name, channel, data);
-	});
-}
-
-GPIOPort.prototype.digitalWrite = function(channel, value, callback) {
-	var name = this.name;
-	$.post(this.url + "/" + channel + "/value/" + value, function(data) {
-		callback(name, channel, data);
-	});
-}
-
-GPIOPort.prototype.setFunction = function(channel, func, callback) {
-	var name = this.name;
-	$.post(this.url + "/" + channel + "/function/" + func, function(data) {
-		callback(name, channel, data);
-	});
-}
-
-GPIOPort.prototype.readAll = function(callback) {
-	var name = this.name;
-	$.get(this.url+ "/*", function(data) {
-		callback(name, data);
-	});
-}
-
-GPIOPort.prototype.refreshUI = function() {
-	var port = this;
-	var element = this.element;
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	if ((element != undefined) && (element.table == undefined) && this.isReady()) {
-		element.header.text(this)
-		element.table = $("<table>");
-		element.append(element.table);
-
-		var line = $("<tr>");
-		for (var i = this.channelCount-1; i>=0; i--) {
-			var cell = $("<td>");
-			cell.text(1<<i);
-			line.append(cell);
-		}
-		element.table.append(line);
-		
-		line = $("<tr>");
-		for (var i = this.channelCount-1; i>=0; i--) {
-			var cell = $("<td>");
-			var button = webiopi().createButton(this.name + "_" + i + "_value", i, function() {
-				if ($("#" + port.name + "_" + $(this).attr("channel") + "_value").attr("class") == "LOW") {
-					value = 1;
-				}
-				else {
-					value = 0;
-				}
-				port.digitalWrite($(this).attr("channel"), value, function(name, channel, data) {
-					if (data == "1") {
-						$("#" + name + "_" + channel + "_value").attr("class", "HIGH")
-					}
-					else {
-						$("#" + name + "_" + channel + "_value").attr("class", "LOW")
-					}
-				});
-			});
-			button.attr("channel", i);
-			button.attr("class", "LOW");
-			cell.append(button);
-			line.append(cell);
-		}
-		element.table.append(line);
-		
-		line = $("<tr>");
-		for (var i = this.channelCount-1; i>=0; i--) {
-			var cell = $("<td>");
-			var button = webiopi().createButton(port.name + "_" + i + "_func", "IN", function() {
-				var func = $(this).text();
-				console.log(func);
-				if (func == "IN") {
-					func = "OUT";
-				}
-				else {
-					func = "IN";
-				}
-				port.setFunction($(this).attr("channel"), func, function(name, channel, func) {
-					$("#" + port.name + "_" + channel + "_func").text(func);
-				});
-			});
-			button.attr("class", "FunctionBasic");
-			button.attr("channel", i);
-			cell.append(button);
-			line.append(cell);
-		}
-		element.table.append(line);
-	}
-	
-	this.readAll(function(name, data) {
-		for (i in data) {
-			$("#" + name + "_" + i + "_value").attr("class", data[i]["value"] == "1" ? "HIGH" : "LOW");
-			$("#" + name + "_" + i + "_func").text(data[i]["function"]);
-		}
-		setTimeout(function(){port.refreshUI()}, port.refreshTime);
-	});
-}
-
-function ADC(name) {
-	this.name = name;
-	this.url = "/devices/" + name + "/analog";
-	this.channelCount = 0;
-	this.maxInteger = 0;
-	this.resolution = 0;
-	this.refreshTime = 1000;
-	
-	var adc = this;
-	$.get(this.url + "/count", function(data) {
-		adc.channelCount = parseInt(data);
-	});
-
-	$.get(this.url + "/max", function(data) {
-		adc.maxInteger = parseInt(data);
-	});
-
-	$.get(this.url + "/resolution", function(data) {
-		adc.resolution = parseInt(data);
-	});
-}
-
-ADC.prototype.isReady = function() {
-	return (this.channelCount > 0 && this.maxInteger > 0 && this.resolution > 0 );
-}
-
-ADC.prototype.toString = function() {
-	if (this.channelCount > 0 && this.resolution> 0)
-		return this.name + ": ADC (" + this.resolution + "-bits, " + this.channelCount  + "-channels)";
-	return this.name + ": ADC";
-}
-
-ADC.prototype.readInteger = function(channel, callback) {
-	var name = this.name;
-	$.get(this.url + "/" + channel + "/integer", function(data) {
-		callback(name, channel, data);
-	});
-}
-
-ADC.prototype.readFloat = function(channel, callback) {
-	var name = this.name;
-	$.get(this.url + "/" + channel + "/float", function(data) {
-		callback(name, channel, data);
-	});
-}
-
-ADC.prototype.readVolt = function(channel, callback) {
-	var name = this.name;
-	$.get(this.url + "/" + channel + "/volt", function(data) {
-		callback(name, channel, data);
-	});
-}
-
-ADC.prototype.readAllInteger = function(callback) {
-	var name = this.name;
-	$.get(this.url + "/*/integer", function(data) {
-		callback(name, data);
-	});
-}
-
-ADC.prototype.readAllFloat = function(callback) {
-	var name = this.name;
-	$.get(this.url + "/*/float", function(data) {
-		callback(name, data);
-	});
-}
-
-ADC.prototype.readAllVolt = function(callback) {
-	var name = this.name;
-	$.get(this.url + "/*/volt", function(data) {
-		callback(name, data);
-	});
-}
-
-ADC.prototype.refreshUI = function () {
-	var adc = this;
-	var element = this.element;
-	
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	if ((element != undefined) && (element.channels == undefined) && this.isReady()) {
-		element.header.text(this);
-		element.channels = Array();
-		for (i = 0; i<this.channelCount; i++) {
-			var div = $("<div>");
-			div.text("Channel-" + i);
-			element.append(div);
-			element.channels[i] = div;
-			
-		}
-	}
-	this.readAllVolt(function(name, data) {
-		for (i in data) {
-			if ((element != undefined) && (element.channels != undefined)) {
-				var div = element.channels[i];
-				div.text("Channel-" + i + ": " + parseFloat(data[i]).toFixed(2) + "V")
-			}
-		}
-		setTimeout(function(){adc.refreshUI()}, adc.refreshTime);
-	});
-}
-
-
-function DAC(name) {
-	this.name = name;
-	this.url = "/devices/" + name + "/analog";
-	this.channelCount = 0;
-	this.maxInteger = 0;
-	this.resolution = 0;
-	this.vref = 0;
-	
-	var dac = this;
-	$.get(this.url + "/count", function(data) {
-		dac.channelCount = parseInt(data);
-	});
-
-	$.get(this.url + "/max", function(data) {
-		dac.maxInteger = parseInt(data);
-	});
-
-	$.get(this.url + "/resolution", function(data) {
-		dac.resolution = parseInt(data);
-	});
-
-	$.get(this.url + "/vref", function(data) {
-		dac.vref = parseFloat(data);
-	});
-}
-
-DAC.prototype.isReady = function() {
-	return (this.channelCount > 0 && this.maxInteger > 0 && this.resolution > 0 && this.vref > 0);
-}
-
-DAC.prototype.toString = function() {
-	if (this.channelCount > 0 && this.resolution> 0)
-		return this.name + ": DAC (" + this.resolution + "-bits, " + this.channelCount  + "-channels)";
-	return this.name + ": DAC";
-}
-
-DAC.prototype.writeInteger = function(channel, value, callback) {
-	var name = this.name;
-	$.post(this.url + "/" + channel + "/integer/" + value, function(data) {
-		callback(name, channel, data);
-	});
-}
-
-DAC.prototype.writeFloat = function(channel, value, callback) {
-	var name = this.name;
-	$.post(this.url + "/" + channel + "/float/" + value, function(data) {
-		callback(name, channel, data);
-	});
-}
-
-DAC.prototype.readAllInteger = function(callback) {
-	var name = this.name;
-	$.get(this.url + "/*/integer", function(data) {
-		callback(name, data);
-	});
-}
-
-DAC.prototype.readAllFloat = function(callback) {
-	var name = this.name;
-	$.get(this.url + "/*/float", function(data) {
-		callback(name, data);
-	});
-}
-
-DAC.prototype.refreshUI = function() {
-	var dac = this;
-	var element = this.element;
-
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	if ((element != undefined) && (element.table == undefined) && this.isReady()) {
-		element.header.text(this);
-		element.table = $("<table>");
-		element.append(element.table);
-		for (var i = 0; i<this.channelCount; i++) {
-			var line = $("<tr>");
-			var cell
-			cell = $("<td>");
-			cell.text("Channel-" + i);
-			line.append(cell);
-			
-			cell = $("<td>");
-			var slider = $('<input type="range" min="0" max="100" step="1" value="0">')
-			slider.attr("channel", i);
-			slider.attr("id", "slider_" + this.name + "_" + i);
-			cell.append(slider);
-			line.append(cell);
-
-			cell = $("<td>");
-			var span = $('<span>');
-			span.attr("id", "span_" + this.name + "_" + i);
-			cell.append(span);
-			line.append(cell);
-
-			slider.bind("change", function() {
-				dac.writeFloat($(this).attr("channel"), $(this).val()/100, function(name, channel, data) {
-					var val = (data*100).toFixed(0);
-					var volts = (data*dac.vref).toFixed(2);
-					$("#span_" + name + "_" + channel).text(volts + "V - " + val + "%");
-					$("#slider_" + name + "_" + channel).val(val);
-				});
-			});
-
-			element.table.append(line);
-		}
-		this.readAllFloat(function(name, data) {
-			for (i in data) {
-				var val = (data[i]*100).toFixed(0);
-				var volts = (data[i]*dac.vref).toFixed(2);
-				$("#span_" + name + "_" + i).text(volts + "V - " + val + "%");
-				$("#slider_" + name + "_" + i).val(val);
-			}
-		});
-	}
-	else {
-		setTimeout(function(){dac.refreshUI()}, 1000);
-	}
-
-}
-
-function PWM(name) {
-	this.name = name;
-	this.url = "/devices/" + name + "/pwm";
-	this.channelCount = 0;
-	this.maxInteger = 0;
-	this.resolution = 0;
-	this.refreshTime = 1000;
-	
-	var pwm = this;
-	$.get(this.url + "/count", function(data) {
-		pwm.channelCount = parseInt(data);
-	});
-
-	$.get(this.url + "/max", function(data) {
-		pwm.maxInteger = parseInt(data);
-	});
-
-	$.get(this.url + "/resolution", function(data) {
-		pwm.resolution = parseInt(data);
-	});
-}
-
-PWM.prototype.isReady = function() {
-	return (this.channelCount > 0 && this.maxInteger > 0 && this.resolution > 0 );
-}
-
-PWM.prototype.toString = function() {
-	if (this.channelCount > 0 && this.resolution> 0)
-		return this.name + ": PWM (" + this.resolution + "-bits, " + this.channelCount  + "-channels)";
-	return this.name + ": PWM";
-}
-
-PWM.prototype.writeInteger = function(channel, value, callback) {
-	var name = this.name;
-	$.post(this.url + "/" + channel + "/integer/" + value, function(data) {
-		callback(name, channel, data);
-	});
-}
-
-PWM.prototype.writeFloat = function(channel, value, callback) {
-	var name = this.name;
-	$.post(this.url + "/" + channel + "/float/" + value, function(data) {
-		callback(name, channel, data);
-	});
-}
-
-PWM.prototype.writeAngle = function(channel, value, callback) {
-	var name = this.name;
-	$.post(this.url + "/" + channel + "/angle/" + value, function(data) {
-		callback(name, channel, data);
-	});
-}
-
-PWM.prototype.readAllInteger = function(callback) {
-	var name = this.name;
-	$.get(this.url + "/*/integer", function(data) {
-		callback(name, data);
-	});
-}
-
-PWM.prototype.readAllFloat = function(callback) {
-	var name = this.name;
-	$.get(this.url + "/*/float", function(data) {
-		callback(name, data);
-	});
-}
-
-PWM.prototype.readAll = function(callback) {
-	var name = this.name;
-	$.get(this.url + "/*", function(data) {
-		callback(name, data);
-	});
-}
-
-PWM.prototype.refreshUI = function() {
-	var pwm = this;
-	var element = this.element;
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	if ((element != undefined) && (element.table == undefined) && this.isReady()) {
-		element.header.text(this);
-		element.table = $("<table>");
-		element.append(element.table);
-
-		for (var i = 0; i<this.channelCount; i++) {
-			var line = $("<tr>");
-			var cell
-			cell = $("<td>");
-			cell.text("Channel-" + i);
-			line.append(cell);
-			
-			cell = $("<td>");
-			var checkbox = $('<input type="checkbox">');
-			checkbox.attr("id", "checkbox_" + this.name + "_" + i);
-			checkbox.attr("channel", i);
-			
-			var cblabel = $('<label>');
-			cblabel.append(checkbox);
-			cblabel.append("Servo");
-			cell.append(cblabel);
-			line.append(cell);
-			
-			cell = $("<td>");
-			var slider = $('<input type="range" min="0" max="100" step="1" value="0">')
-			slider.attr("channel", i);
-			slider.attr("id", "slider_" + this.name + "_" + i);
-			cell.append(slider);
-			line.append(cell);
-
-			cell = $("<td>");
-			var span = $('<span>');
-			span.attr("id", "span_" + this.name + "_" + i);
-			cell.append(span);
-			line.append(cell);
-
-			checkbox.bind("change", function() {
-				var slider = $("#slider_" + pwm.name + "_" + $(this).attr("channel"))
-				slider.attr("servo", $(this).is(":checked"));
-			});
-
-			slider.bind("change", function() {
-				if ($(this).attr("servo") == "true") {
-					pwm.writeAngle($(this).attr("channel"), $(this).val(), function(name, channel, data) {
-						var val = data;
-						$("#span_" + name + "_" + channel).text(val + "°");
-						$("#slider_" + name + "_" + channel).val(val);
-					});
-				}
-				else {
-					pwm.writeFloat($(this).attr("channel"), $(this).val()/100, function(name, channel, data) {
-						var val = (data*100).toFixed(0);
-						$("#span_" + name + "_" + channel).text(val + "%");
-						$("#slider_" + name + "_" + channel).val(val);
-					});
-				}
-			});
-
-			element.table.append(line);
-		}
-	}
-
-	this.readAll(function(name, data) {
-		for (i in data) {
-			var slider = $("#slider_" + name + "_" + i);
-			var span = $("#span_" + name + "_" + i);
-			var val = 0;
-
-			if (slider.attr("servo") == "true") {
-				slider.attr("min", -45);
-				slider.attr("max", 45);
-				val = data[i]["angle"];
-				span.text(val + "°");
-			}
-			else {
-				slider.attr("min", 0);
-				slider.attr("max", 100);
-				val = (data[i]["float"]*100).toFixed(0);
-				span.text(val + "%");
-			}
-			slider.val(val);
-			
-		}
-		setTimeout(function(){pwm.refreshUI()}, pwm.refreshTime);
-	});
-}
-
-function Temperature(name) {
-	this.name = name;
-	this.url = "/devices/" + name + "/sensor";
-	this.refreshTime = 5000;
-}
-
-Temperature.prototype.toString = function() {
-	return this.name + ": Temperature";
-}
-
-Temperature.prototype.getKelvin = function(callback) {
-	$.get(this.url + "/temperature/k", function(data) {
-		callback(this.name, data);
-	});
-}
-
-Temperature.prototype.getCelsius = function(callback) {
-	$.get(this.url + "/temperature/c", function(data) {
-		callback(this.name, data);
-	});
-}
-
-Temperature.prototype.getFahrenheit = function(callback) {
-	$.get(this.url + "/temperature/f", function(data) {
-		callback(this.name, data);
-	});
-}
-
-Temperature.prototype.refreshUI = function() {
-	var temp = this;
-	var element = this.element;
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	this.getCelsius(function(name, data){
-		if (element != undefined) {
-			element.header.text(temp + ": " + data + "°C");
-		}
-		setTimeout(function(){temp.refreshUI()}, temp.refreshTime);
-	});
-}
-
-function Pressure(name) {
-	this.name = name;
-	this.url = "/devices/" + name + "/sensor";
-	this.refreshTime = 5000;
-}
-
-Pressure.prototype.toString = function() {
-	return this.name + ": Pressure";
-}
-
-Pressure.prototype.getPascal = function(callback) {
-	$.get(this.url + "/pressure/pa", function(data) {
-		callback(this.name, data);
-	});
-}
-
-Pressure.prototype.getHectoPascal = function(callback) {
-	$.get(this.url + "/pressure/hpa", function(data) {
-		callback(this.name, data);
-	});
-}
-
-Pressure.prototype.refreshUI = function() {
-	var pressure = this;
-	var element = this.element;
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	pressure.getHectoPascal(function(name, data){
-		if (element != undefined) {
-			element.header.text(pressure + ": " + data + "hPa");
-		}
-		setTimeout(function(){pressure.refreshUI()}, pressure.refreshTime);
-	});
-}
-	
-
-function Luminosity(name) {
-	this.name = name;
-	this.url = "/devices/" + name + "/sensor";
-	this.refreshTime = 1000;
-}
-
-Luminosity.prototype.toString = function() {
-	return this.name + ": Luminosity";
-}
-
-Luminosity.prototype.getLux = function(callback) {
-	$.get(this.url + "/luminosity/lux", function(data) {
-		callback(this.name, data);
-	});
-}
-
-Luminosity.prototype.refreshUI = function() {
-	var lum = this;
-	var element = this.element;
-	
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	this.getLux(function(name, data){
-		if (element != undefined) {
-			element.header.text(lum + ": " + data + "lux");
-		}
-		setTimeout(function(){lum.refreshUI()}, lum.refreshTime);
-	});
-}
-
-function Distance(name) {
-	this.name = name;
-	this.url = "/devices/" + name + "/sensor";
-	this.refreshTime = 1000;
-}
-
-Distance.prototype.toString = function() {
-	return this.name + ": Distance";
-}
-
-Distance.prototype.getMillimeter = function(callback) {
-	$.get(this.url + "/distance/mm", function(data) {
-		callback(this.name, data);
-	});
-}
-
-Distance.prototype.refreshUI = function() {
-	var dist = this;
-	var element = this.element;
-	
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	this.getMillimeter(function(name, data){
-		if (element != undefined) {
-			element.header.text(dist + ": " + data + "mm");
-		}
-		setTimeout(function(){dist.refreshUI()}, dist.refreshTime);
-	});
-}
-
-function PiFaceDigital(name) {
-	this.name = name;
-	this.url = "/devices/" + name + "/digital";
-	this.onready = null;
-	this.refreshTime = 1000;
-}
-
-PiFaceDigital.prototype.toString = function() {
-	return "PiFaceDigital";
-}
-
-PiFaceDigital.prototype.input = function(channel, callback) {
-	var name = this.name;
-	$.get(this.url + "/input/" + channel, function(data) {
-		callback(name, channel, data);
-	});
-}
-
-PiFaceDigital.prototype.output = function(channel, value, callback) {
-	var name = this.name;
-	$.post(this.url + "/output/" + channel + "/" + value, function(data) {
-		callback(name, channel, data);
-	});
-}
-
-PiFaceDigital.prototype.readAll = function(callback) {
-	var name = this.name;
-	$.get(this.url+ "/*", function(data) {
-		callback(name, data);
-	});
-}
-
-PiFaceDigital.prototype.refreshUI = function() {
-	var port = this;
-	var element = this.element;
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	if ((element != undefined) && (element.table == undefined)) {
-		element.header.text(this)
-		element.table = $("<table>");
-		element.append(element.table);
-
-		var line = $("<tr>");
-		line.append($("<td><b>Outputs</b></td>"))
-		for (var i = 7; i>=0; i--) {
-			var cell = $("<td>");
-			var button = webiopi().createButton(this.name + "_output_" + i, i, function() {
-				if ($("#" + port.name + "_output_" + $(this).attr("channel")).attr("class") == "LOW") {
-					value = 1;
-				}
-				else {
-					value = 0;
-				}
-				port.output($(this).attr("channel"), value, function(name, channel, data) {
-					var button = $("#" + name + "_output_" + channel);
-					if (data == "1") {
-						button.attr("class", "HIGH")
-					}
-					else {
-						button.attr("class", "LOW")
-					}
-				});
-			});
-			button.attr("channel", i);
-			button.attr("class", "LOW");
-			cell.append(button);
-			line.append(cell);
-		}
-		element.table.append(line);
-
-		line = $("<tr>");
-		line.append($("<td><b>Inputs</b></td>"))
-		for (var i = 7; i>=0; i--) {
-			var cell = $("<td>");
-			var button = webiopi().createButton(this.name + "_input_" + i, i, function() {
-			});
-			button.attr("channel", i);
-			button.attr("class", "LOW");
-			cell.append(button);
-			line.append(cell);
-		}
-		element.table.append(line);
-
-	}
-	
-	this.readAll(function(name, data) {
-		for (i in data["input"]) {
-			$("#" + name + "_input_" + i).attr("class", data["input"][i] == "1" ? "HIGH" : "LOW");
-		}
-		for (i in data["output"]) {
-			$("#" + name + "_output_" + i).attr("class", data["output"][i] == "1" ? "HIGH" : "LOW");
-		}
-		setTimeout(function(){port.refreshUI()}, port.refreshTime);
-	});
-}
-
-function Humidity(name) {
-	this.name = name;
-	this.url = "/devices/" + name + "/sensor";
-	this.refreshTime = 5000;
-}
-
-Humidity.prototype.toString = function() {
-	return this.name + ": Humidity";
-}
-
-Humidity.prototype.getHumidity = function(callback) {
-	$.get(this.url + "/humidity/float", function(data) {
-		callback(this.name, data);
-	});
-}
-
-Humidity.prototype.getHumidityPercent = function(callback) {
-	$.get(this.url + "/humidity/percent", function(data) {
-		callback(this.name, data);
-	});
-}
-
-Humidity.prototype.refreshUI = function() {
-	var temp = this;
-	var element = this.element;
-	if ((element != undefined) && (element.header == undefined)) {
-		element.header = $("<h3>" + this + "</h3>");
-		element.append(element.header);
-	}
-	
-	this.getHumidityPercent(function(name, data){
-		if (element != undefined) {
-			element.header.text(temp + ": " + data + "%");
-		}
-		setTimeout(function(){temp.refreshUI()}, temp.refreshTime);
-	});
-}
+/*
+   Copyright 2012-2013 Eric Ptak - trouch.com
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+*/
+
+var _gaq = _gaq || [];
+var _webiopi;
+var _pins = 40;
+
+function w() {
+	if (_webiopi == undefined) {
+		_webiopi = new WebIOPi();
+	}
+	
+	return _webiopi;
+}
+
+function webiopi() {
+	return w();
+}
+
+/*
+function isMobileUserAgent(a) {
+	if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))
+			return true
+}
+
+var _isMobile = undefined;
+function isMobile() {
+	if (_isMobile == undefined) {
+		_isMobile = ((navigator.userAgent != undefined && isMobileUserAgent(navigator.userAgent))
+				|| (navigator.vendor != undefined && isMobileUserAgent(navigator.vendor)) 
+				|| (window.opera != undefined && isMobileUserAgent(window.opera)))
+	}
+	return _isMobile
+}
+*/
+
+var isTouchDevice = "ontouchstart" in document.documentElement ? true : false;
+var BUTTON_DOWN   = isTouchDevice ? "touchstart" : "mousedown";
+var BUTTON_UP     = isTouchDevice ? "touchend"   : "mouseup";
+
+/*
+var deviceAgent = navigator.userAgent.toLowerCase();
+if (deviceAgent.match(/(iphone|ipod|ipad)/) ||
+		deviceAgent.match(/(android)/)  || 
+		deviceAgent.match(/(iemobile)/) ||
+		deviceAgent.match(/iphone/i) ||
+		deviceAgent.match(/ipad/i) || 
+		deviceAgent.match(/ipod/i) || 
+		deviceAgent.match(/blackberry/i) ||
+		deviceAgent.match(/bada/i) ||
+	"ontouchstart" in document.documentElement
+	) {
+        isTouchDevice = true;
+		BUTTON_DOWN = "touchstart";
+		BUTTON_UP = "touchend";
+}
+*/
+
+
+function WebIOPi() {
+	this.readyCallback = null;
+	this.context = "/";
+	this.GPIO = Array(54);
+	this.PINS = Array(_pins+1);
+
+	this.TYPE = {
+			DNC: {value: 0, style: "DNC", label: "--"},
+			GND: {value: 1, style: "GND", label: "GROUND"},
+			V33: {value: 2, style: "V33", label: "3.3V"},
+			V50: {value: 3, style: "V50", label: "5.0V"},
+			GPIO: {value: 4, style: "GPIO", label: "GPIO"}
+	};
+	
+	this.ALT = {
+			I2C: {name: "I2C", enabled: false, gpios: []},
+			SPI: {name: "SPI", enabled: false, gpios: []},
+			UART: {name: "UART", enabled: false, gpios: []},
+			ONEWIRE: {name: "ONEWIRE", enabled: false, gpios: []}
+		};
+		
+	// init GPIOs
+	for (var i=0; i<this.GPIO.length; i++) {
+		var gpio = Object();
+		gpio.value = 0;
+		gpio.func = "IN";
+		gpio.mapped = false;
+		this.GPIO[i] = gpio;
+	}
+
+	// get context
+	var reg = new RegExp("http://" + window.location.host + "(.*)webiopi.js");
+	var scripts = document.getElementsByTagName("script");
+	for(var i = 0; i < scripts.length; i++) {
+		var res = reg.exec(scripts[i].src);
+		if (res && (res.length > 1)) {
+			script = scripts[i];
+			this.context = res[1];
+			
+		}
+	}
+
+	var head = document.getElementsByTagName('head')[0];
+
+	var jquery = document.createElement('script');
+	jquery.type = 'text/javascript';
+	jquery.src = '/jquery.js';
+//	if (!isMobile()) {
+		jquery.onload = function() {
+			w().init();
+		};
+//	}
+	head.appendChild(jquery);
+
+/*
+	if (isMobile()) {
+		console.log("load jquery mobile");
+		var mobile = document.createElement('script');
+		mobile.type = 'text/javascript';
+		mobile.src = '/jquery-mobile.js';
+		mobile.onload = function() {
+			w().initMobile()
+		};
+		head.appendChild(mobile);
+	}
+*/
+
+	// GA
+	_gaq.push(['_setAccount', 'UA-33979593-2']);
+	_gaq.push(['_trackPageview']);
+		
+	var ga = document.createElement('script');
+	ga.type = 'text/javascript';
+	ga.async = false;
+	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
+	head.appendChild(ga);
+	
+	var style = document.createElement('link');
+	style.rel = "stylesheet";
+	style.type = 'text/css';
+	style.href = '/webiopi.css';
+	head.appendChild(style);
+
+/*
+	if (isMobile()) {
+		var style = document.createElement('link');
+		style.rel = "stylesheet";
+		style.type = 'text/css';
+		style.href = '/jquery-mobile.css';
+		head.appendChild(style);
+	}
+*/
+	
+	// init ALTs
+	this.addALT(this.ALT.I2C, 0, "SDA");
+	this.addALT(this.ALT.I2C, 1, "SCL");
+	this.addALT(this.ALT.I2C, 2, "SDA");
+	this.addALT(this.ALT.I2C, 3, "SCL");
+
+	this.addALT(this.ALT.SPI,  7, "CE1");
+	this.addALT(this.ALT.SPI,  8, "CE0");
+	this.addALT(this.ALT.SPI,  9, "MISO");
+	this.addALT(this.ALT.SPI, 10, "MOSI");
+	this.addALT(this.ALT.SPI, 11, "SCLK");
+
+	this.addALT(this.ALT.UART, 14, "TX");
+	this.addALT(this.ALT.UART, 15, "RX");
+
+	this.addALT(this.ALT.ONEWIRE, 4, "");
+}
+
+WebIOPi.prototype.init = function() {
+	$.getJSON(w().context + "map", function(data) {
+		var count = w().PINS.length;
+		for (i = 0; i<count-1; i++) {
+			var type = w().TYPE.GPIO;
+			var label = data[i];
+			
+			if (label == "DNC") {
+				type = w().TYPE.DNC;
+			}
+			else if (label == "GND") {
+				type = w().TYPE.GND;
+			}
+			else if (label == "V33") {
+				type = w().TYPE.V33;
+			}
+			else if (label == "V50") {
+				type = w().TYPE.V50;
+			}
+			
+			if (type.value != w().TYPE.GPIO.value) {
+				label = type.label;
+			}
+			
+			w().map(i+1, type, label);
+		}
+		if (w().readyCallback != null) {
+			w().readyCallback();
+		}
+
+		w().checkVersion();
+	});
+}
+
+/*
+WebIOPi.prototype.initMobile = function() {
+	webiopi().init();
+}
+*/
+
+WebIOPi.prototype.ready = function (cb) {
+	w().readyCallback = cb;
+}
+
+WebIOPi.prototype.map = function (pin, type, value) {
+	w().PINS[pin] = Object();
+	w().PINS[pin].type = type
+	w().PINS[pin].value = value;
+	
+	if (type.value == w().TYPE.GPIO.value) {
+		w().GPIO[value].mapped = true;
+	}
+}
+
+WebIOPi.prototype.addALT = function (alt, gpio, name) {
+	var o = Object();
+	o.gpio = gpio;
+	o.name = name;
+	alt.gpios.push(o);
+}
+
+WebIOPi.prototype.updateValue = function (gpio, value) {
+	w().GPIO[gpio].value = value;
+	var style = (value == 1) ? "HIGH" : "LOW";
+	$("#gpio"+gpio).attr("class", style);
+}
+
+WebIOPi.prototype.updateFunction = function (gpio, func) {
+	w().GPIO[gpio].func = func;
+	$("#function"+gpio).val(func);
+	$("#function"+gpio).text(func);
+}
+
+WebIOPi.prototype.updateSlider = function (gpio, slider, value) {
+	$("#"+slider+gpio).val(value);
+}
+
+WebIOPi.prototype.updateALT = function (alt, enable) {
+	for (var p in alt.gpios) {
+		gpio = alt.gpios[p].gpio;
+		$("#description"+gpio).empty();
+		if (enable) {
+			$("#description"+gpio).append(alt.name + " " + alt.gpios[p].name);
+			$("#gpio"+gpio).attr("class", alt.name);
+			$("#function"+gpio).attr("class", "FunctionSpecial");
+		}
+		else {
+			$("#description"+gpio).append("GPIO " + gpio);
+			$("#gpio"+gpio).attr("class", "");
+			$("#function"+gpio).attr("class", "FunctionBasic");
+		}
+	}
+	alt.enabled = enable;
+}
+
+WebIOPi.prototype.refreshGPIO = function (repeat) {
+	$.getJSON(w().context + "*", function(data) {
+		w().updateALT(w().ALT.SPI, data["SPI"]);
+		w().updateALT(w().ALT.I2C, data["I2C"]);
+		w().updateALT(w().ALT.UART, data["UART"]);
+		w().updateALT(w().ALT.ONEWIRE, data["ONEWIRE"]);
+		
+		$.each(data["GPIO"], function(gpio, data) {
+	    	w().updateFunction(gpio, data["function"]);
+	    	if ( ((gpio != 4) && ((data["function"] == "IN") || (data["function"] == "OUT"))
+	    		|| ((gpio == 4) && (w().ALT.ONEWIRE["enabled"] == false)))){
+	    		w().updateValue(gpio, data["value"]);
+	    	}
+	    	else if (data["function"] == "PWM") {
+	    		w().updateSlider(gpio, "ratio", data["ratio"]);
+	    		w().updateSlider(gpio, "angle", data["angle"]);
+	    	}
+		});
+	});
+	if (repeat === true) {
+		setTimeout(function(){w().refreshGPIO(repeat)}, 500);
+	}
+}
+
+
+WebIOPi.prototype.RPiInfo = function () {
+	$.getJSON(w().context + "rpi_info", function(data) {
+		var rpi_type = $('<a>MODEL : ' + data["TYPE"] + '</a><br>');
+		var rpi_brev = $('<a>REVISION : ' + data["BREV"] + '</a><br>');
+		var rpi_proc = $('<a>PROCESSOR : ' + data["PROCESSOR"] + '</a><br>');
+		var rpi_rams = $('<a>MEMORY : ' + data["RAM"] + '</a><br>');
+		var rpi_fact = $('<a>MANUFACTURER : ' + data["MANUFACTURER"] + '</a>');
+		$("#myinfo").append(rpi_type);
+		$("#myinfo").append(rpi_brev);
+		$("#myinfo").append(rpi_proc);
+		$("#myinfo").append(rpi_rams);
+		$("#myinfo").append(rpi_fact);
+	});
+}
+
+WebIOPi.prototype.checkVersion = function () {
+	var version;
+	
+	$.get(w().context + "version", function(data) {
+		_gaq.push(['_trackEvent', 'version', data]);
+//		version = data.split("/")[2];
+//
+//		$.get("http://webiopi.trouch.com/version.php", function(data) {
+//			var lines = data.split("\n");
+//			var c = version.split(".");
+//			var n = lines[0].split(".");
+//			var updated = false;
+//			for (i=0; i<Math.min(c.length, n.length); i++) {
+//				if (n[i]>c[i]) {
+//					updated = true;
+//				}
+//			}
+//			if (updated || (n.length > c.length)) {
+//				var div = $('<div id="update"><a href="' + lines[1] + '">Update available</a></div>');
+//				$("body").append(div);
+//			}
+//		});
+	});
+}
+
+WebIOPi.prototype.digitalRead = function (gpio, callback) {
+	if (callback != undefined) {
+		$.get(w().context + 'GPIO/' + gpio + "/value", function(data) {
+			w().updateValue(gpio, data);
+			callback(gpio, data);
+		});
+	}
+	return w().GPIO[gpio].value;
+}
+
+WebIOPi.prototype.digitalWrite = function (gpio, value, callback) {
+	if (w().GPIO[gpio].func.toUpperCase()=="OUT") {
+		$.post(w().context + 'GPIO/' + gpio + "/value/" + value, function(data) {
+			w().updateValue(gpio, data);
+			if (callback != undefined) {
+				callback(gpio, data);
+			}
+		});
+	}
+	else {
+		//console.log(w().GPIO[gpio].func);
+	}
+}
+
+WebIOPi.prototype.getFunction = function (gpio, callback) {
+	if (callback != undefined) {
+		$.get(w().context + 'GPIO/' + gpio + "/function", function(data) {
+			w().updateFunction(gpio, data);
+			callback(gpio, data);
+		});
+	}
+	return w().GPIO[gpio].func;
+}
+WebIOPi.prototype.setFunction = function (gpio, func, callback) {
+	$.post(w().context + 'GPIO/' + gpio + "/function/" + func, function(data) {
+		w().updateFunction(gpio, data);
+		if (callback != undefined) {
+			callback(gpio, data);
+		}
+	});
+}
+
+WebIOPi.prototype.toggleValue = function (gpio) {
+	var value = (w().GPIO[gpio].value == 1) ? 0 : 1;
+	w().digitalWrite(gpio, value);
+}
+
+WebIOPi.prototype.toggleFunction = function (gpio) {
+	var value = (w().GPIO[gpio].func == "IN") ? "OUT" : "IN";
+	w().setFunction(gpio, value)
+}
+
+WebIOPi.prototype.outputSequence = function (gpio, period, sequence, callback) {
+	$.post(w().context + 'GPIO/' + gpio + "/sequence/" + period + "," + sequence, function(data) {
+		w().updateValue(gpio, data);
+		if (callback != undefined) {
+			callback(gpio, data);
+		}
+	});
+}
+
+WebIOPi.prototype.callMacro = function (macro, args, callback) {
+	if (args == undefined) {
+		args = "";
+	}
+	$.post(w().context + 'macros/' + macro + "/" + args, function(data) {
+		if (callback != undefined) {
+			callback(macro, args, data);
+		}
+	});
+}
+
+WebIOPi.prototype.enablePWM = function(gpio, callback) {
+	$.post(w().context + 'GPIO/' + gpio + "/pwm/enable", function(data) {
+		if (callback != undefined) {
+			callback(gpio, data);
+		}
+	});
+}
+
+WebIOPi.prototype.disablePWM = function(gpio, callback) {
+	$.post(w().context + 'GPIO/' + gpio + "/pwm/disable", function(data) {
+		if (callback != undefined) {
+			callback(gpio, data);
+		}
+	});
+}
+
+WebIOPi.prototype.pulse = function(gpio, callback) {
+	$.post(w().context + 'GPIO/' + gpio + "/pulse/", function(data) {
+		if (callback != undefined) {
+			callback(gpio, data);
+		}
+	});
+}
+
+WebIOPi.prototype.pulseRatio = function(gpio, ratio, callback) {
+	$.post(w().context + 'GPIO/' + gpio + "/pulseRatio/" + ratio, function(data) {
+		if (callback != undefined) {
+			callback(gpio, data);
+		}
+	});
+}
+
+WebIOPi.prototype.pulseAngle = function(gpio, angle, callback) {
+	$.post(w().context + 'GPIO/' + gpio + "/pulseAngle/" + angle, function(data) {
+		if (callback != undefined) {
+			callback(gpio, data);
+		}
+	});
+}
+
+WebIOPi.prototype.setLabel = function (id, label) {
+	$("#" + id).val(label);
+	$("#" + id).text(label);
+}
+
+WebIOPi.prototype.setClass = function (id, cssClass) {
+	$("#" + id).attr("class", cssClass);
+}
+
+WebIOPi.prototype.createButton = function (id, label, callback, callbackUp) {
+	var button = $('<button type="button" class="Default">');
+	button.attr("id", id);
+	button.text(label);
+	if (callback != undefined) {
+		button.bind(BUTTON_DOWN, callback);
+	}
+	if (callbackUp != undefined) {
+		button.bind(BUTTON_UP, callbackUp);
+	}
+	return button;
+}
+
+WebIOPi.prototype.createGPIOButton = function (gpio, label) {
+	var button = w().createButton("gpio" + gpio, label);
+	button.bind(BUTTON_DOWN, function(event) {
+		w().toggleValue(gpio);
+	});
+	return button;
+}
+
+WebIOPi.prototype.createFunctionButton = function (gpio) {
+	var button = w().createButton("function" + gpio, " ");
+	button.attr("class", "FunctionBasic");
+	button.bind(BUTTON_DOWN, function(event) {
+		w().toggleFunction(gpio);
+	});
+	return button;
+}
+
+WebIOPi.prototype.createPulseButton = function (id, label, gpio) {
+    var button = webiopi().createButton(id, label);
+    button.bind(BUTTON_DOWN, function(event) {
+        webiopi().pulse(gpio);
+    });
+    return button;
+}
+
+WebIOPi.prototype.createMacroButton = function (id, label, macro, args) {
+    var button = webiopi().createButton(id, label);
+    button.bind(BUTTON_DOWN, function(event) {
+        webiopi().callMacro(macro, args);
+    });
+    return button;
+}
+
+WebIOPi.prototype.createSequenceButton = function (id, label, gpio, period, sequence) {
+    var button = webiopi().createButton(id, label);
+    button.bind(BUTTON_DOWN, function(event) {
+        webiopi().outputSequence(gpio, period, sequence);
+    });
+    return button;
+}
+
+WebIOPi.prototype.createRatioSlider = function(gpio) {
+	var slider = $('<input type="range" min="0.0" max="1.0" step="0.01">');
+	slider.attr("id", "ratio"+gpio);
+	slider.bind("change", function() {
+		w().pulseRatio(gpio, slider.val());
+	});
+	return slider;
+}
+
+WebIOPi.prototype.createAngleSlider = function(gpio) {
+	var slider = $('<input type="range" min="-45" max="45" step="1">');
+	slider.attr("id", "angle"+gpio);
+	slider.bind("change", function() {
+		w().pulseAngle(gpio, slider.val());
+	});
+	return slider;
+}
+
+WebIOPi.prototype.RPiHeader = function () {
+	if (w()._header == undefined) {
+		w()._header = new RPiHeader();
+	}
+	return w()._header;
+}
+
+function RPiHeader() {
+
+}
+
+RPiHeader.prototype.getPinCell = function (pin) {
+	var cell = $('<td align="center">');
+	var button;
+	if (w().PINS[pin].type.value == w().TYPE.GPIO.value) {
+		button = w().createGPIOButton(w().PINS[pin].value, pin);
+	}
+	else {
+		var button = $('<button type="button">');
+		button.val(pin);
+		button.text(pin);
+		button.attr("class", w().PINS[pin].type.style);
+	}
+	cell.append(button);
+	return cell;
+}
+
+RPiHeader.prototype.getDescriptionCell = function (pin, align) {
+	var cell = $('<td>');
+	cell.attr("align", align);
+	
+	var div = $('<div>');
+	div.attr("class", "Description");
+	if (w().PINS[pin].type.value != w().TYPE.GPIO.value) {
+		div.append(w().PINS[pin].value);
+	}
+	else {
+		div.attr("id", "description"+w().PINS[pin].value);
+		div.append("GPIO " + w().PINS[pin].value);
+	}
+	
+	cell.append(div);
+
+	return cell;
+}
+
+RPiHeader.prototype.getFunctionCell = function (pin) {
+	var cell = $('<td align="center">');
+	if (w().PINS[pin].type.value == w().TYPE.GPIO.value) {
+		var button = w().createFunctionButton(w().PINS[pin].value);
+		cell.append(button);
+	}
+	return cell;
+}
+
+RPiHeader.prototype.createTable = function (containerId) {
+	var table = $("<table>");
+	table.attr("id", "RPiHeader")
+	for (var pin=1; pin<=_pins; pin++) {
+		var line = 	$('<tr>');
+		line.append(this.getFunctionCell(pin))
+		line.append(this.getDescriptionCell(pin, "right"))
+		line.append(this.getPinCell(pin));
+
+		pin++;
+		line.append(this.getPinCell(pin));
+		line.append(this.getDescriptionCell(pin, "left"))
+		line.append(this.getFunctionCell(pin))
+
+		table.append(line);
+	}
+	
+	if (containerId != undefined) {
+		$("#"+containerId).append(table);
+	}
+	
+	return table;
+}
+
+WebIOPi.prototype.Expert = function () {
+	if (w()._expert == undefined) {
+		w()._expert = new Expert();
+	}
+	return w()._expert;
+}
+
+function Expert() {
+	
+}
+
+Expert.prototype.createGPIO = function (gpio) {
+	var box = $("<div>");
+	box.append(w().createFunctionButton(gpio));
+	box.append(w().createGPIOButton(gpio, gpio));
+
+	div = $('<div>');
+	div.attr("id", "description"+gpio);
+	div.attr("class", "Description");
+	div.append("GPIO " + gpio);
+	box.append(div);
+
+	return box;
+}
+
+Expert.prototype.createList = function (containerId) {
+	var box = $('<div>');
+	
+	for (i = 0; i<w().GPIO.length; i++) {
+		if (w().GPIO[i].mapped == true) {
+			var gpio = w().Expert().createGPIO(i);
+			box.append(gpio);
+		}
+	}
+		
+	if (containerId != undefined) {
+		$("#"+containerId).append(box);
+	}
+	
+	return box;
+} 
+
+WebIOPi.prototype.Serial = function(device) {
+	return new Serial(device);
+}
+
+function Serial(device) {
+	this.device = device;
+	this.url = "/devices/" + device
+}
+
+Serial.prototype.write = function(data) {
+	$.post(this.url, data);
+} 
+
+Serial.prototype.read = function(callback) {
+	$.get(this.url, callback);
+}
+
+WebIOPi.prototype.newDevice = function(type, name) {
+	if (type == "ADC") {
+		return new ADC(name);
+	}
+	
+	if (type == "DAC") {
+		return new DAC(name);
+	}
+
+	if (type == "PWM") {
+		return new PWM(name);
+	}
+
+	if (type == "GPIOPort") {
+		return new GPIOPort(name);
+	}
+
+	if (type == "Temperature") {
+		return new Temperature(name);
+	}
+
+	if (type == "Pressure") {
+		return new Pressure(name);
+	}
+
+	if (type == "Luminosity") {
+		return new Luminosity(name);
+	}
+
+	if (type == "Distance") {
+		return new Distance(name);
+	}
+	
+	if (type == "PiFaceDigital") {
+		return new PiFaceDigital(name);
+	}
+
+	if (type == "Humidity") {
+		return new Humidity(name);
+	}
+
+	return undefined;
+}
+
+function GPIOPort(name) {
+	this.name = name;
+	this.url = "/devices/" + name;
+	this.onready = null;
+	this.channelCount = 0;
+	this.refreshTime = 1000;
+
+	var port = this;
+	$.get(this.url + "/count", function(data) {
+		port.channelCount = parseInt(data);
+	});
+
+}
+
+GPIOPort.prototype.isReady = function() {
+	return (this.channelCount > 0);
+}
+
+GPIOPort.prototype.toString = function() {
+	if (this.channelCount > 0)
+		return this.name + ": GPIO Port (" + this.channelCount + "-bits)";
+	return this.name + ": GPIO Port";
+}
+
+GPIOPort.prototype.digitalRead = function(channel, callback) {
+	var name = this.name;
+	$.get(this.url + "/" + channel + "/value", function(data) {
+		callback(name, channel, data);
+	});
+}
+
+GPIOPort.prototype.digitalWrite = function(channel, value, callback) {
+	var name = this.name;
+	$.post(this.url + "/" + channel + "/value/" + value, function(data) {
+		callback(name, channel, data);
+	});
+}
+
+GPIOPort.prototype.setFunction = function(channel, func, callback) {
+	var name = this.name;
+	$.post(this.url + "/" + channel + "/function/" + func, function(data) {
+		callback(name, channel, data);
+	});
+}
+
+GPIOPort.prototype.readAll = function(callback) {
+	var name = this.name;
+	$.get(this.url+ "/*", function(data) {
+		callback(name, data);
+	});
+}
+
+GPIOPort.prototype.refreshUI = function() {
+	var port = this;
+	var element = this.element;
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	if ((element != undefined) && (element.table == undefined) && this.isReady()) {
+		element.header.text(this)
+		element.table = $("<table>");
+		element.append(element.table);
+
+		var line = $("<tr>");
+		for (var i = this.channelCount-1; i>=0; i--) {
+			var cell = $("<td>");
+			cell.text(1<<i);
+			line.append(cell);
+		}
+		element.table.append(line);
+		
+		line = $("<tr>");
+		for (var i = this.channelCount-1; i>=0; i--) {
+			var cell = $("<td>");
+			var button = webiopi().createButton(this.name + "_" + i + "_value", i, function() {
+				if ($("#" + port.name + "_" + $(this).attr("channel") + "_value").attr("class") == "LOW") {
+					value = 1;
+				}
+				else {
+					value = 0;
+				}
+				port.digitalWrite($(this).attr("channel"), value, function(name, channel, data) {
+					if (data == "1") {
+						$("#" + name + "_" + channel + "_value").attr("class", "HIGH")
+					}
+					else {
+						$("#" + name + "_" + channel + "_value").attr("class", "LOW")
+					}
+				});
+			});
+			button.attr("channel", i);
+			button.attr("class", "LOW");
+			cell.append(button);
+			line.append(cell);
+		}
+		element.table.append(line);
+		
+		line = $("<tr>");
+		for (var i = this.channelCount-1; i>=0; i--) {
+			var cell = $("<td>");
+			var button = webiopi().createButton(port.name + "_" + i + "_func", "IN", function() {
+				var func = $(this).text();
+				console.log(func);
+				if (func == "IN") {
+					func = "OUT";
+				}
+				else {
+					func = "IN";
+				}
+				port.setFunction($(this).attr("channel"), func, function(name, channel, func) {
+					$("#" + port.name + "_" + channel + "_func").text(func);
+				});
+			});
+			button.attr("class", "FunctionBasic");
+			button.attr("channel", i);
+			cell.append(button);
+			line.append(cell);
+		}
+		element.table.append(line);
+	}
+	
+	this.readAll(function(name, data) {
+		for (i in data) {
+			$("#" + name + "_" + i + "_value").attr("class", data[i]["value"] == "1" ? "HIGH" : "LOW");
+			$("#" + name + "_" + i + "_func").text(data[i]["function"]);
+		}
+		setTimeout(function(){port.refreshUI()}, port.refreshTime);
+	});
+}
+
+function ADC(name) {
+	this.name = name;
+	this.url = "/devices/" + name + "/analog";
+	this.channelCount = 0;
+	this.maxInteger = 0;
+	this.resolution = 0;
+	this.refreshTime = 1000;
+	
+	var adc = this;
+	$.get(this.url + "/count", function(data) {
+		adc.channelCount = parseInt(data);
+	});
+
+	$.get(this.url + "/max", function(data) {
+		adc.maxInteger = parseInt(data);
+	});
+
+	$.get(this.url + "/resolution", function(data) {
+		adc.resolution = parseInt(data);
+	});
+}
+
+ADC.prototype.isReady = function() {
+	return (this.channelCount > 0 && this.maxInteger > 0 && this.resolution > 0 );
+}
+
+ADC.prototype.toString = function() {
+	if (this.channelCount > 0 && this.resolution> 0)
+		return this.name + ": ADC (" + this.resolution + "-bits, " + this.channelCount  + "-channels)";
+	return this.name + ": ADC";
+}
+
+ADC.prototype.readInteger = function(channel, callback) {
+	var name = this.name;
+	$.get(this.url + "/" + channel + "/integer", function(data) {
+		callback(name, channel, data);
+	});
+}
+
+ADC.prototype.readFloat = function(channel, callback) {
+	var name = this.name;
+	$.get(this.url + "/" + channel + "/float", function(data) {
+		callback(name, channel, data);
+	});
+}
+
+ADC.prototype.readVolt = function(channel, callback) {
+	var name = this.name;
+	$.get(this.url + "/" + channel + "/volt", function(data) {
+		callback(name, channel, data);
+	});
+}
+
+ADC.prototype.readAllInteger = function(callback) {
+	var name = this.name;
+	$.get(this.url + "/*/integer", function(data) {
+		callback(name, data);
+	});
+}
+
+ADC.prototype.readAllFloat = function(callback) {
+	var name = this.name;
+	$.get(this.url + "/*/float", function(data) {
+		callback(name, data);
+	});
+}
+
+ADC.prototype.readAllVolt = function(callback) {
+	var name = this.name;
+	$.get(this.url + "/*/volt", function(data) {
+		callback(name, data);
+	});
+}
+
+ADC.prototype.refreshUI = function () {
+	var adc = this;
+	var element = this.element;
+	
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	if ((element != undefined) && (element.channels == undefined) && this.isReady()) {
+		element.header.text(this);
+		element.channels = Array();
+		for (i = 0; i<this.channelCount; i++) {
+			var div = $("<div>");
+			div.text("Channel-" + i);
+			element.append(div);
+			element.channels[i] = div;
+			
+		}
+	}
+	this.readAllVolt(function(name, data) {
+		for (i in data) {
+			if ((element != undefined) && (element.channels != undefined)) {
+				var div = element.channels[i];
+				div.text("Channel-" + i + ": " + parseFloat(data[i]).toFixed(2) + "V")
+			}
+		}
+		setTimeout(function(){adc.refreshUI()}, adc.refreshTime);
+	});
+}
+
+
+function DAC(name) {
+	this.name = name;
+	this.url = "/devices/" + name + "/analog";
+	this.channelCount = 0;
+	this.maxInteger = 0;
+	this.resolution = 0;
+	this.vref = 0;
+	
+	var dac = this;
+	$.get(this.url + "/count", function(data) {
+		dac.channelCount = parseInt(data);
+	});
+
+	$.get(this.url + "/max", function(data) {
+		dac.maxInteger = parseInt(data);
+	});
+
+	$.get(this.url + "/resolution", function(data) {
+		dac.resolution = parseInt(data);
+	});
+
+	$.get(this.url + "/vref", function(data) {
+		dac.vref = parseFloat(data);
+	});
+}
+
+DAC.prototype.isReady = function() {
+	return (this.channelCount > 0 && this.maxInteger > 0 && this.resolution > 0 && this.vref > 0);
+}
+
+DAC.prototype.toString = function() {
+	if (this.channelCount > 0 && this.resolution> 0)
+		return this.name + ": DAC (" + this.resolution + "-bits, " + this.channelCount  + "-channels)";
+	return this.name + ": DAC";
+}
+
+DAC.prototype.writeInteger = function(channel, value, callback) {
+	var name = this.name;
+	$.post(this.url + "/" + channel + "/integer/" + value, function(data) {
+		callback(name, channel, data);
+	});
+}
+
+DAC.prototype.writeFloat = function(channel, value, callback) {
+	var name = this.name;
+	$.post(this.url + "/" + channel + "/float/" + value, function(data) {
+		callback(name, channel, data);
+	});
+}
+
+DAC.prototype.readAllInteger = function(callback) {
+	var name = this.name;
+	$.get(this.url + "/*/integer", function(data) {
+		callback(name, data);
+	});
+}
+
+DAC.prototype.readAllFloat = function(callback) {
+	var name = this.name;
+	$.get(this.url + "/*/float", function(data) {
+		callback(name, data);
+	});
+}
+
+DAC.prototype.refreshUI = function() {
+	var dac = this;
+	var element = this.element;
+
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	if ((element != undefined) && (element.table == undefined) && this.isReady()) {
+		element.header.text(this);
+		element.table = $("<table>");
+		element.append(element.table);
+		for (var i = 0; i<this.channelCount; i++) {
+			var line = $("<tr>");
+			var cell
+			cell = $("<td>");
+			cell.text("Channel-" + i);
+			line.append(cell);
+			
+			cell = $("<td>");
+			var slider = $('<input type="range" min="0" max="100" step="1" value="0">')
+			slider.attr("channel", i);
+			slider.attr("id", "slider_" + this.name + "_" + i);
+			cell.append(slider);
+			line.append(cell);
+
+			cell = $("<td>");
+			var span = $('<span>');
+			span.attr("id", "span_" + this.name + "_" + i);
+			cell.append(span);
+			line.append(cell);
+
+			slider.bind("change", function() {
+				dac.writeFloat($(this).attr("channel"), $(this).val()/100, function(name, channel, data) {
+					var val = (data*100).toFixed(0);
+					var volts = (data*dac.vref).toFixed(2);
+					$("#span_" + name + "_" + channel).text(volts + "V - " + val + "%");
+					$("#slider_" + name + "_" + channel).val(val);
+				});
+			});
+
+			element.table.append(line);
+		}
+		this.readAllFloat(function(name, data) {
+			for (i in data) {
+				var val = (data[i]*100).toFixed(0);
+				var volts = (data[i]*dac.vref).toFixed(2);
+				$("#span_" + name + "_" + i).text(volts + "V - " + val + "%");
+				$("#slider_" + name + "_" + i).val(val);
+			}
+		});
+	}
+	else {
+		setTimeout(function(){dac.refreshUI()}, 1000);
+	}
+
+}
+
+function PWM(name) {
+	this.name = name;
+	this.url = "/devices/" + name + "/pwm";
+	this.channelCount = 0;
+	this.maxInteger = 0;
+	this.resolution = 0;
+	this.refreshTime = 1000;
+	
+	var pwm = this;
+	$.get(this.url + "/count", function(data) {
+		pwm.channelCount = parseInt(data);
+	});
+
+	$.get(this.url + "/max", function(data) {
+		pwm.maxInteger = parseInt(data);
+	});
+
+	$.get(this.url + "/resolution", function(data) {
+		pwm.resolution = parseInt(data);
+	});
+}
+
+PWM.prototype.isReady = function() {
+	return (this.channelCount > 0 && this.maxInteger > 0 && this.resolution > 0 );
+}
+
+PWM.prototype.toString = function() {
+	if (this.channelCount > 0 && this.resolution> 0)
+		return this.name + ": PWM (" + this.resolution + "-bits, " + this.channelCount  + "-channels)";
+	return this.name + ": PWM";
+}
+
+PWM.prototype.writeInteger = function(channel, value, callback) {
+	var name = this.name;
+	$.post(this.url + "/" + channel + "/integer/" + value, function(data) {
+		callback(name, channel, data);
+	});
+}
+
+PWM.prototype.writeFloat = function(channel, value, callback) {
+	var name = this.name;
+	$.post(this.url + "/" + channel + "/float/" + value, function(data) {
+		callback(name, channel, data);
+	});
+}
+
+PWM.prototype.writeAngle = function(channel, value, callback) {
+	var name = this.name;
+	$.post(this.url + "/" + channel + "/angle/" + value, function(data) {
+		callback(name, channel, data);
+	});
+}
+
+PWM.prototype.readAllInteger = function(callback) {
+	var name = this.name;
+	$.get(this.url + "/*/integer", function(data) {
+		callback(name, data);
+	});
+}
+
+PWM.prototype.readAllFloat = function(callback) {
+	var name = this.name;
+	$.get(this.url + "/*/float", function(data) {
+		callback(name, data);
+	});
+}
+
+PWM.prototype.readAll = function(callback) {
+	var name = this.name;
+	$.get(this.url + "/*", function(data) {
+		callback(name, data);
+	});
+}
+
+PWM.prototype.refreshUI = function() {
+	var pwm = this;
+	var element = this.element;
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	if ((element != undefined) && (element.table == undefined) && this.isReady()) {
+		element.header.text(this);
+		element.table = $("<table>");
+		element.append(element.table);
+
+		for (var i = 0; i<this.channelCount; i++) {
+			var line = $("<tr>");
+			var cell
+			cell = $("<td>");
+			cell.text("Channel-" + i);
+			line.append(cell);
+			
+			cell = $("<td>");
+			var checkbox = $('<input type="checkbox">');
+			checkbox.attr("id", "checkbox_" + this.name + "_" + i);
+			checkbox.attr("channel", i);
+			
+			var cblabel = $('<label>');
+			cblabel.append(checkbox);
+			cblabel.append("Servo");
+			cell.append(cblabel);
+			line.append(cell);
+			
+			cell = $("<td>");
+			var slider = $('<input type="range" min="0" max="100" step="1" value="0">')
+			slider.attr("channel", i);
+			slider.attr("id", "slider_" + this.name + "_" + i);
+			cell.append(slider);
+			line.append(cell);
+
+			cell = $("<td>");
+			var span = $('<span>');
+			span.attr("id", "span_" + this.name + "_" + i);
+			cell.append(span);
+			line.append(cell);
+
+			checkbox.bind("change", function() {
+				var slider = $("#slider_" + pwm.name + "_" + $(this).attr("channel"))
+				slider.attr("servo", $(this).is(":checked"));
+			});
+
+			slider.bind("change", function() {
+				if ($(this).attr("servo") == "true") {
+					pwm.writeAngle($(this).attr("channel"), $(this).val(), function(name, channel, data) {
+						var val = data;
+						$("#span_" + name + "_" + channel).text(val + "°");
+						$("#slider_" + name + "_" + channel).val(val);
+					});
+				}
+				else {
+					pwm.writeFloat($(this).attr("channel"), $(this).val()/100, function(name, channel, data) {
+						var val = (data*100).toFixed(0);
+						$("#span_" + name + "_" + channel).text(val + "%");
+						$("#slider_" + name + "_" + channel).val(val);
+					});
+				}
+			});
+
+			element.table.append(line);
+		}
+	}
+
+	this.readAll(function(name, data) {
+		for (i in data) {
+			var slider = $("#slider_" + name + "_" + i);
+			var span = $("#span_" + name + "_" + i);
+			var val = 0;
+
+			if (slider.attr("servo") == "true") {
+				slider.attr("min", -45);
+				slider.attr("max", 45);
+				val = data[i]["angle"];
+				span.text(val + "°");
+			}
+			else {
+				slider.attr("min", 0);
+				slider.attr("max", 100);
+				val = (data[i]["float"]*100).toFixed(0);
+				span.text(val + "%");
+			}
+			slider.val(val);
+			
+		}
+		setTimeout(function(){pwm.refreshUI()}, pwm.refreshTime);
+	});
+}
+
+function Temperature(name) {
+	this.name = name;
+	this.url = "/devices/" + name + "/sensor";
+	this.refreshTime = 5000;
+}
+
+Temperature.prototype.toString = function() {
+	return this.name + ": Temperature";
+}
+
+Temperature.prototype.getKelvin = function(callback) {
+	$.get(this.url + "/temperature/k", function(data) {
+		callback(this.name, data);
+	});
+}
+
+Temperature.prototype.getCelsius = function(callback) {
+	$.get(this.url + "/temperature/c", function(data) {
+		callback(this.name, data);
+	});
+}
+
+Temperature.prototype.getFahrenheit = function(callback) {
+	$.get(this.url + "/temperature/f", function(data) {
+		callback(this.name, data);
+	});
+}
+
+Temperature.prototype.refreshUI = function() {
+	var temp = this;
+	var element = this.element;
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	this.getCelsius(function(name, data){
+		if (element != undefined) {
+			element.header.text(temp + ": " + data + "°C");
+		}
+		setTimeout(function(){temp.refreshUI()}, temp.refreshTime);
+	});
+}
+
+function Pressure(name) {
+	this.name = name;
+	this.url = "/devices/" + name + "/sensor";
+	this.refreshTime = 5000;
+}
+
+Pressure.prototype.toString = function() {
+	return this.name + ": Pressure";
+}
+
+Pressure.prototype.getPascal = function(callback) {
+	$.get(this.url + "/pressure/pa", function(data) {
+		callback(this.name, data);
+	});
+}
+
+Pressure.prototype.getHectoPascal = function(callback) {
+	$.get(this.url + "/pressure/hpa", function(data) {
+		callback(this.name, data);
+	});
+}
+
+Pressure.prototype.refreshUI = function() {
+	var pressure = this;
+	var element = this.element;
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	pressure.getHectoPascal(function(name, data){
+		if (element != undefined) {
+			element.header.text(pressure + ": " + data + "hPa");
+		}
+		setTimeout(function(){pressure.refreshUI()}, pressure.refreshTime);
+	});
+}
+	
+
+function Luminosity(name) {
+	this.name = name;
+	this.url = "/devices/" + name + "/sensor";
+	this.refreshTime = 1000;
+}
+
+Luminosity.prototype.toString = function() {
+	return this.name + ": Luminosity";
+}
+
+Luminosity.prototype.getLux = function(callback) {
+	$.get(this.url + "/luminosity/lux", function(data) {
+		callback(this.name, data);
+	});
+}
+
+Luminosity.prototype.refreshUI = function() {
+	var lum = this;
+	var element = this.element;
+	
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	this.getLux(function(name, data){
+		if (element != undefined) {
+			element.header.text(lum + ": " + data + "lux");
+		}
+		setTimeout(function(){lum.refreshUI()}, lum.refreshTime);
+	});
+}
+
+function Distance(name) {
+	this.name = name;
+	this.url = "/devices/" + name + "/sensor";
+	this.refreshTime = 1000;
+}
+
+Distance.prototype.toString = function() {
+	return this.name + ": Distance";
+}
+
+Distance.prototype.getMillimeter = function(callback) {
+	$.get(this.url + "/distance/mm", function(data) {
+		callback(this.name, data);
+	});
+}
+
+Distance.prototype.refreshUI = function() {
+	var dist = this;
+	var element = this.element;
+	
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	this.getMillimeter(function(name, data){
+		if (element != undefined) {
+			element.header.text(dist + ": " + data + "mm");
+		}
+		setTimeout(function(){dist.refreshUI()}, dist.refreshTime);
+	});
+}
+
+function PiFaceDigital(name) {
+	this.name = name;
+	this.url = "/devices/" + name + "/digital";
+	this.onready = null;
+	this.refreshTime = 1000;
+}
+
+PiFaceDigital.prototype.toString = function() {
+	return "PiFaceDigital";
+}
+
+PiFaceDigital.prototype.input = function(channel, callback) {
+	var name = this.name;
+	$.get(this.url + "/input/" + channel, function(data) {
+		callback(name, channel, data);
+	});
+}
+
+PiFaceDigital.prototype.output = function(channel, value, callback) {
+	var name = this.name;
+	$.post(this.url + "/output/" + channel + "/" + value, function(data) {
+		callback(name, channel, data);
+	});
+}
+
+PiFaceDigital.prototype.readAll = function(callback) {
+	var name = this.name;
+	$.get(this.url+ "/*", function(data) {
+		callback(name, data);
+	});
+}
+
+PiFaceDigital.prototype.refreshUI = function() {
+	var port = this;
+	var element = this.element;
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	if ((element != undefined) && (element.table == undefined)) {
+		element.header.text(this)
+		element.table = $("<table>");
+		element.append(element.table);
+
+		var line = $("<tr>");
+		line.append($("<td><b>Outputs</b></td>"))
+		for (var i = 7; i>=0; i--) {
+			var cell = $("<td>");
+			var button = webiopi().createButton(this.name + "_output_" + i, i, function() {
+				if ($("#" + port.name + "_output_" + $(this).attr("channel")).attr("class") == "LOW") {
+					value = 1;
+				}
+				else {
+					value = 0;
+				}
+				port.output($(this).attr("channel"), value, function(name, channel, data) {
+					var button = $("#" + name + "_output_" + channel);
+					if (data == "1") {
+						button.attr("class", "HIGH")
+					}
+					else {
+						button.attr("class", "LOW")
+					}
+				});
+			});
+			button.attr("channel", i);
+			button.attr("class", "LOW");
+			cell.append(button);
+			line.append(cell);
+		}
+		element.table.append(line);
+
+		line = $("<tr>");
+		line.append($("<td><b>Inputs</b></td>"))
+		for (var i = 7; i>=0; i--) {
+			var cell = $("<td>");
+			var button = webiopi().createButton(this.name + "_input_" + i, i, function() {
+			});
+			button.attr("channel", i);
+			button.attr("class", "LOW");
+			cell.append(button);
+			line.append(cell);
+		}
+		element.table.append(line);
+
+	}
+	
+	this.readAll(function(name, data) {
+		for (i in data["input"]) {
+			$("#" + name + "_input_" + i).attr("class", data["input"][i] == "1" ? "HIGH" : "LOW");
+		}
+		for (i in data["output"]) {
+			$("#" + name + "_output_" + i).attr("class", data["output"][i] == "1" ? "HIGH" : "LOW");
+		}
+		setTimeout(function(){port.refreshUI()}, port.refreshTime);
+	});
+}
+
+function Humidity(name) {
+	this.name = name;
+	this.url = "/devices/" + name + "/sensor";
+	this.refreshTime = 5000;
+}
+
+Humidity.prototype.toString = function() {
+	return this.name + ": Humidity";
+}
+
+Humidity.prototype.getHumidity = function(callback) {
+	$.get(this.url + "/humidity/float", function(data) {
+		callback(this.name, data);
+	});
+}
+
+Humidity.prototype.getHumidityPercent = function(callback) {
+	$.get(this.url + "/humidity/percent", function(data) {
+		callback(this.name, data);
+	});
+}
+
+Humidity.prototype.refreshUI = function() {
+	var temp = this;
+	var element = this.element;
+	if ((element != undefined) && (element.header == undefined)) {
+		element.header = $("<h3>" + this + "</h3>");
+		element.append(element.header);
+	}
+	
+	this.getHumidityPercent(function(name, data){
+		if (element != undefined) {
+			element.header.text(temp + ": " + data + "%");
+		}
+		setTimeout(function(){temp.refreshUI()}, temp.refreshTime);
+	});
+}
diff -urN WebIOPi-0.7.1org/python/native/bridge.c WebIOPi-0.7.1/python/native/bridge.c
--- WebIOPi-0.7.1org/python/native/bridge.c	2013-03-17 21:56:40.000000000 +0900
+++ WebIOPi-0.7.1/python/native/bridge.c	2023-11-18 15:50:32.328196429 +0900
@@ -28,6 +28,8 @@
 static PyObject *_InvalidDirectionException;
 static PyObject *_InvalidChannelException;
 static PyObject *_InvalidPullException;
+static PyObject *rpi_revision;
+static PyObject *board_info;
 
 static PyObject *_gpioCount;
 
@@ -49,8 +51,6 @@
 static PyObject *_pud_up;
 static PyObject *_pud_down;
 
-static PyObject *_board_revision;
-
 static char* FUNCTIONS[] = {"IN", "OUT", "ALT5", "ALT4", "ALT0", "ALT1", "ALT2", "ALT3", "PWM"};
 static char* PWM_MODES[] = {"none", "ratio", "angle"};
 
@@ -619,7 +619,7 @@
 #endif
 {
 	PyObject *module = NULL;
-	int revision = -1;
+	/* int revision = -1; */
 
 #if PY_MAJOR_VERSION > 2
 	if ((module = PyModule_Create(&python_module)) == NULL)
@@ -687,19 +687,27 @@
 	PyModule_AddObject(module, "PUD_DOWN", _pud_down);
 
 	// detect board revision and set up accordingly
-	revision = get_rpi_revision();
-	if (revision == -1)
+	if (get_rpi_info(&rpiinfo))
 	{
 		PyErr_SetString(_SetupException, "This module can only be run on a Raspberry Pi!");
 #if PY_MAJOR_VERSION > 2
-		return NULL;
+	return NULL;
 #else
-		return;
+	return;
 #endif
 	}
+	board_info = Py_BuildValue("{sissssssssssss}",
+				   "P1_REVISION",rpiinfo.p1_revision,
+				   "REVISION",&rpiinfo.revision,
+        			   "TYPE",rpiinfo.type,
+				   "MANUFACTURER",rpiinfo.manufacturer,
+				   "PROCESSOR",rpiinfo.processor,
+				   "BREV",rpiinfo.brev,
+				   "RAM",rpiinfo.ram);
+	PyModule_AddObject(module, "RPI_INFO", board_info);
 
-	_board_revision = Py_BuildValue("i", revision);
-	PyModule_AddObject(module, "BOARD_REVISION", _board_revision);
+	rpi_revision = Py_BuildValue("i", rpiinfo.p1_revision);       // deprecated
+	PyModule_AddObject(module, "BOARD_REVISION", rpi_revision);   // deprecated
 
 	if (Py_AtExit(cleanup) != 0)
 	{
diff -urN WebIOPi-0.7.1org/python/native/cpuinfo.c WebIOPi-0.7.1/python/native/cpuinfo.c
--- WebIOPi-0.7.1org/python/native/cpuinfo.c	2012-10-29 06:26:10.000000000 +0900
+++ WebIOPi-0.7.1/python/native/cpuinfo.c	2023-11-18 15:52:50.956411889 +0900
@@ -1,5 +1,5 @@
 /*
-Copyright (c) 2012 Ben Croston
+Copyright (c) 2012-2019 Ben Croston & 2021 pochinet.org
 
 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
@@ -20,46 +20,299 @@
 SOFTWARE.
 */
 
+/* See the following for up to date information:
+ * https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md
+ */
+
 #include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
 #include <string.h>
+#include <arpa/inet.h>
 #include "cpuinfo.h"
 
-char *get_cpuinfo_revision(char *revision)
+int get_rpi_info(rpi_info *info)
 {
    FILE *fp;
    char buffer[1024];
    char hardware[1024];
-   int  rpi_found = 0;
-
-   if ((fp = fopen("/proc/cpuinfo", "r")) == NULL)
-      return 0;
+   char revision[1024];
+   int found = 0;
+   int len;
 
-   while(!feof(fp)) {
-      fgets(buffer, sizeof(buffer) , fp);
-      sscanf(buffer, "Hardware	: %s", hardware);
-      if (strcmp(hardware, "BCM2708") == 0)
-         rpi_found = 1;
-      sscanf(buffer, "Revision	: %s", revision);
+   if ((fp = fopen("/proc/device-tree/system/linux,revision", "r"))) {
+      uint32_t n;
+      if (fread(&n, sizeof(n), 1, fp) != 1) {
+         fclose(fp);
+         return -1;
+      }
+      sprintf(revision, "%x", ntohl(n));
+      found = 1;
+   }
+   else if ((fp = fopen("/proc/cpuinfo", "r"))) {
+      while(!feof(fp) && fgets(buffer, sizeof(buffer), fp)) {
+         sscanf(buffer, "Hardware	: %s", hardware);
+         if (strcmp(hardware, "BCM2708") == 0 ||
+             strcmp(hardware, "BCM2709") == 0 ||
+             strcmp(hardware, "BCM2835") == 0 ||
+             strcmp(hardware, "BCM2836") == 0 ||
+             strcmp(hardware, "BCM2837") == 0 ||
+             strcmp(hardware, "BCM2711") == 0 ||
+             strcmp(hardware, "BCM2712") == 0 ) {
+            found = 1;
+         }
+         sscanf(buffer, "Revision	: %s", revision);
+      }
    }
+   else
+      return -1;
    fclose(fp);
 
-   if (!rpi_found)
-      revision = NULL;
-   return revision;
-}
+   if (!found)
+      return -1;
 
-int get_rpi_revision(void)
-{
-   char revision[1024] = {'\0'};
-   
-   if (get_cpuinfo_revision(revision) == NULL)
+   if ((len = strlen(revision)) == 0)
       return -1;
-      
-   if ((strcmp(revision, "0002") == 0) ||
-       (strcmp(revision, "1000002") == 0 ) ||
-       (strcmp(revision, "0003") == 0) ||
-       (strcmp(revision, "1000003") == 0 ))
-      return 1;
-   else // assume rev 2 (0004 0005 0006 1000004 1000005 1000006)
-      return 2;
+
+   if (len >= 6 && strtol((char[]){revision[len-6],0}, NULL, 16) & 8) {
+      // new scheme
+      //info->rev = revision[len-1]-'0';
+      strcpy(info->revision, revision);
+      switch (revision[len-1]) {
+         case '0': info->brev = "1.0"; break;
+         case '1': info->brev = "1.1"; break;
+         case '2': info->brev = "1.2"; break;
+         case '3': info->brev = "1.3"; break;
+         case '4': info->brev = "1.4"; break;
+         case '5': info->brev = "1.5"; break;
+         case '6': info->brev = "1.6"; break;
+         case '7': info->brev = "1.7"; break;
+         case '8': info->brev = "1.8"; break;
+         case '9': info->brev = "1.9"; break;
+         default : info->brev = "Unknown"; break;
+      }
+      switch (revision[len-3]) {
+         case '0':
+            switch (revision[len-2]) {
+               case '0': info->type = "Raspberry Pi Model A"; info->p1_revision = 2; break;
+               case '1': info->type = "Raspberry Pi Model B"; info->p1_revision = 2; break;
+               case '2': info->type = "Raspberry Pi Model A+"; info->p1_revision = 3; break;
+               case '3': info->type = "Raspberry Pi Model B+"; info->p1_revision = 3; break;
+               case '4': info->type = "Raspberry Pi 2 Model B"; info->p1_revision = 3; break;
+               case '5': info->type = "Alpha"; info->p1_revision = 3; break;
+               case '6': info->type = "Compute Module 1"; info->p1_revision = 0; break;
+               case '8': info->type = "Raspberry Pi 3 Model B"; info->p1_revision = 3; break;
+               case '9': info->type = "Raspberry Pi Zero"; info->p1_revision = 3; break;
+               case 'a': info->type = "Compute Module 3"; info->p1_revision = 0; break;
+               case 'c': info->type = "Raspberry Pi Zero W"; info->p1_revision = 3; break;
+               case 'd': info->type = "Raspberry Pi 3 Model B+"; info->p1_revision = 4; break;
+               case 'e': info->type = "Raspberry Pi 3 Model A+"; info->p1_revision = 4; break;
+               default : info->type = "Unknown"; info->p1_revision = 3; break;
+            } break;
+         case '1':
+            switch (revision[len-2]) {
+               case '0': info->type = "Compute Module 3+"; info->p1_revision = 0; break;
+               case '1': info->type = "Raspberry Pi 4 Model B"; info->p1_revision = 3; break;
+               case '2': info->type = "Raspberry Pi Zero 2 W"; info->p1_revision = 4; break;
+               case '3': info->type = "Raspberry Pi 400"; info->p1_revision = 3; break;
+               case '4': info->type = "Compute Mudule 4"; info->p1_revision = 0; break;
+               case '5': info->type = "Compute Mudule 4S"; info->p1_revision = 0; break;
+               case '7': info->type = "Raspberry Pi 5 Model B"; info->p1_revision = 3; break;
+               default : info->type = "Unknown"; info->p1_revision = 3; break;
+            } break;
+         default: info->type = "Unknown"; info->p1_revision = 3; break;
+      }
+      switch (revision[len-4]) {
+         case '0': info->processor = "BCM2835"; break;
+         case '1': info->processor = "BCM2836"; break;
+         case '2': 
+               switch (revision[len-3]) {
+                     case '1': info->processor = "RP3A0"; break;
+                     default : 
+                           switch (info->p1_revision) {
+                                 case '4': info->processor = "BCM2837B0"; break;
+                                 default : info->processor = "BCM2837"; break;
+                                 } break;
+               } break;
+         case '3': 
+               switch (info->p1_revision) {
+                     case '4': info->processor = "BCM2711C0"; break;
+                     default : info->processor = "BCM2711"; break;
+               } break;
+         case '4': info->processor = "BCM2712"; break;
+         default : info->processor = "Unknown"; break;
+      }
+      switch (revision[len-5]) {
+         case '0': info->manufacturer = "Sony UK"; break;
+         case '1': info->manufacturer = "Egoman"; break;
+         case '2': info->manufacturer = "Embest"; break;
+         case '3': info->manufacturer = "Sony Japan"; break;
+         case '4': info->manufacturer = "Embest"; break;
+         case '5': info->manufacturer = "Stadium"; break;
+         default : info->manufacturer = "Unknown"; break;
+      }
+      switch (strtol((char[]){revision[len-6],0}, NULL, 16) & 7) {
+         case 0: info->ram = "256M"; break;
+         case 1: info->ram = "512M"; break;
+         case 2: info->ram = "1G"; break;
+         case 3: info->ram = "2G"; break;
+         case 4: info->ram = "4G"; break;
+         case 5: info->ram = "8G"; break;
+         default: info->ram = "Unknown"; break;
+      }
+   } else {
+      // old scheme
+      info->ram = "Unknown";
+      info->manufacturer = "Unknown";
+      info->processor = "Unknown";
+      info->type = "Unknown";
+      info->brev = "Unknown";
+      strcpy(info->revision, revision);
+
+      uint64_t rev;
+      sscanf(revision, "%llx", &rev);
+      rev = rev & 0xefffffff;       // ignore preceeding 1000 for overvolt
+
+      if (rev == 0x0002 || rev == 0x0003) {
+         info->type = "Raspberry Pi Model B";
+         info->brev = "1.0";
+         info->p1_revision = 1;
+         info->ram = "256M";
+         info->manufacturer = "Egoman";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0004) {
+         info->type = "Raspberry Pi Model B";
+         info->brev = "2.0";
+         info->p1_revision = 2;
+         info->ram = "256M";
+         info->manufacturer = "Sony UK";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0005) {
+         info->type = "Raspberry Pi Model B";
+         info->brev = "2.0";
+         info->p1_revision = 2;
+         info->ram = "256M";
+         info->manufacturer = "Qisda";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0006) {
+         info->type = "Raspberry Pi Model B";
+         info->brev = "2.0";
+         info->p1_revision = 2;
+         info->ram = "256M";
+         info->manufacturer = "Egoman";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0007) {
+         info->type = "Raspberry Pi Model A";
+         info->brev = "2.0";
+         info->p1_revision = 2;
+         info->ram = "256M";
+         info->manufacturer = "Egoman";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0008) {
+         info->type = "Raspberry Pi Model A";
+         info->brev = "2.0";
+         info->p1_revision = 2;
+         info->ram = "256M";
+         info->manufacturer = "Sony UK";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0009) {
+         info->type = "Raspberry Pi Model A";
+         info->brev = "2.0";
+         info->p1_revision = 2;
+         info->ram = "256M";
+         info->manufacturer = "Qisda";
+         info->processor = "BCM2835";
+      } else if (rev == 0x000d) {
+         info->type = "Raspberry Pi Model B";
+         info->brev = "2.0";
+         info->p1_revision = 2;
+         info->ram = "512M";
+         info->manufacturer = "Egoman";
+         info->processor = "BCM2835";
+      } else if (rev == 0x000e) {
+         info->type = "Raspberry Pi Model B";
+         info->brev = "2.0";
+         info->p1_revision = 2;
+         info->ram = "512M";
+         info->manufacturer = "Sony UK";
+         info->processor = "BCM2835";
+      } else if (rev == 0x000f) {
+         info->type = "Raspberry Pi Model B";
+         info->brev = "2.0";
+         info->p1_revision = 2;
+         info->ram = "512M";
+         info->manufacturer = "Egoman";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0010) {
+         info->type = "Raspberry Pi Model B+";
+         info->brev = "1.2";
+         info->p1_revision = 3;
+         info->ram = "512M";
+         info->manufacturer = "Sony UK";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0011) {
+         info->type = "Compute Module 1";
+         info->brev = "1.0";
+         info->p1_revision = 0;
+         info->ram = "512M";
+         info->manufacturer = "Sony UK";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0012) {
+         info->type = "Raspberry Pi Model A+";
+         info->brev = "1.1";
+         info->p1_revision = 3;
+         info->ram = "256M";
+         info->manufacturer = "Sony UK";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0013) {
+         info->type = "Raspberry Pi Model B+";
+         info->brev = "1.2";
+         info->p1_revision = 3;
+         info->ram = "512M";
+         info->manufacturer = "Embest";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0014) {
+         info->type = "Compute Module 1";
+         info->brev = "1.0";
+         info->p1_revision = 0;
+         info->ram = "512M";
+         info->manufacturer = "Embest";
+         info->processor = "BCM2835";
+      } else if (rev == 0x0015) {
+         info->type = "Raspberry Pi Model A+";
+         info->brev = "1.1";
+         info->p1_revision = 3;
+         info->ram = "Unknown";
+         info->manufacturer = "Embest";
+         info->processor = "BCM2835";
+      } else {  // don't know - assume revision 3 p1 connector
+         info->p1_revision = 3;
+      }
+   }
+   return 0;
 }
+
+/*
+
+32 bits
+NEW                   23: will be 1 for the new scheme, 0 for the old scheme
+MEMSIZE             20: 0=256M 1=512M 2=1G
+MANUFACTURER  16: 0=SONY 1=EGOMAN
+PROCESSOR         12: 0=2835 1=2836
+TYPE                   04: 0=MODELA 1=MODELB 2=MODELA+ 3=MODELB+ 4=Pi2 MODEL B 5=ALPHA 6=CM
+REV                     00: 0=REV0 1=REV1 2=REV2
+
+pi2 = 1<<23 | 2<<20 | 1<<12 | 4<<4 = 0xa01040
+
+--------------------
+
+SRRR MMMM PPPP TTTT TTTT VVVV
+
+S scheme (0=old, 1=new)
+R RAM (0=256,1=512,2=1024,3=2048,4=4096,5=8192)
+M manufacturer (0='SONY',1='EGOMAN',2='EMBEST',3='SONY JP',4='EMBEST',5='Studiam')
+P processor (0=2835,1=2836,2=2837,3=2711)
+T type (0='A',1='B',2='A+',3='B+',4='Pi 2 B',5='Alpha',6='Compute Module')
+V revision (0-15)
+
+*/
diff -urN WebIOPi-0.7.1org/python/native/cpuinfo.h WebIOPi-0.7.1/python/native/cpuinfo.h
--- WebIOPi-0.7.1org/python/native/cpuinfo.h	2012-10-29 06:26:10.000000000 +0900
+++ WebIOPi-0.7.1/python/native/cpuinfo.h	2023-11-18 14:46:29.164221772 +0900
@@ -1,5 +1,5 @@
 /*
-Copyright (c) 2012 Ben Croston
+Copyright (c) 2012-2015 Ben Croston
 
 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
@@ -20,4 +20,19 @@
 SOFTWARE.
 */
 
-int get_rpi_revision(void);
+#ifndef CPUINFO_H
+#define CPUINFO_H
+typedef struct
+{
+   int p1_revision;
+   char *ram;
+   char *manufacturer;
+   char *processor;
+   char *type;
+   char *brev;
+   char revision[1024];
+} rpi_info;
+#endif /* CPUINFO_H */
+
+int get_rpi_info(rpi_info *info);
+rpi_info rpiinfo;
diff -urN WebIOPi-0.7.1org/python/native/gpio.c WebIOPi-0.7.1/python/native/gpio.c
--- WebIOPi-0.7.1org/python/native/gpio.c	2013-02-04 07:04:18.000000000 +0900
+++ WebIOPi-0.7.1/python/native/gpio.c	2023-11-18 16:44:02.767484396 +0900
@@ -20,17 +20,18 @@
 SOFTWARE.
 */
 
+#include <stdio.h>
 #include <stdint.h>
 #include <stdlib.h>
 #include <string.h>
 #include <fcntl.h>
+#include <unistd.h>
 #include <sys/mman.h>
 #include <time.h>
 #include <pthread.h>
 #include "gpio.h"
+#include "cpuinfo.h"
 
-#define BCM2708_PERI_BASE   0x20000000
-#define GPIO_BASE           (BCM2708_PERI_BASE + 0x200000)
 #define FSEL_OFFSET         0   // 0x0000
 #define SET_OFFSET          7   // 0x001c / 4
 #define CLR_OFFSET          10  // 0x0028 / 4
@@ -43,6 +44,11 @@
 #define PULLUPDN_OFFSET     37  // 0x0094 / 4
 #define PULLUPDNCLK_OFFSET  38  // 0x0098 / 4
 
+#define PULLUPDN_OFFSET_2711_0      57
+#define PULLUPDN_OFFSET_2711_1      58
+#define PULLUPDN_OFFSET_2711_2      59
+#define PULLUPDN_OFFSET_2711_3      60
+
 #define PAGE_SIZE  (4*1024)
 #define BLOCK_SIZE (4*1024)
 
@@ -83,7 +89,31 @@
     if ((uint32_t)gpio_mem % PAGE_SIZE)
         gpio_mem += PAGE_SIZE - ((uint32_t)gpio_mem % PAGE_SIZE);
 
-    gpio_map = (uint32_t *)mmap( (caddr_t)gpio_mem, BLOCK_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_FIXED, mem_fd, GPIO_BASE);
+    char buffer[12];
+    const char *ranges_file = "/proc/device-tree/soc/ranges";
+    int info_fd = open(ranges_file, O_RDONLY);
+
+    if (info_fd < 0) {
+        fprintf(stderr, "cannot open: %s", ranges_file);
+        return SETUP_MMAP_FAIL;
+    }
+
+    ssize_t n = read(info_fd, buffer, sizeof(buffer));
+    close(info_fd);
+
+    if (n < 8) {
+        fprintf(stderr, "cannot read base address: %s", ranges_file);
+        return SETUP_MMAP_FAIL;
+    }
+
+    uint32_t gpio_offset = 0x00200000;
+    uint32_t gpio_base =  (buffer[4] << 24) + (buffer[5] << 16) + (buffer[6] << 8) + (buffer[7] << 0) + gpio_offset;
+
+    if (gpio_base == gpio_offset) {
+        gpio_base =  (buffer[8] << 24) + (buffer[9] << 16) + (buffer[10] << 8) + (buffer[11] << 0) + gpio_offset;
+    }
+
+    gpio_map = (uint32_t *)mmap( (caddr_t)gpio_mem, BLOCK_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_FIXED, mem_fd, gpio_base);
 
     if ((uint32_t)gpio_map < 0)
         return SETUP_MMAP_FAIL;
@@ -93,21 +123,44 @@
 
 void set_pullupdn(int gpio, int pud)
 {
-    int clk_offset = PULLUPDNCLK_OFFSET + (gpio/32);
-    int shift = (gpio%32);
-    
-    if (pud == PUD_DOWN)
-       *(gpio_map+PULLUPDN_OFFSET) = (*(gpio_map+PULLUPDN_OFFSET) & ~3) | PUD_DOWN;
-    else if (pud == PUD_UP)
-       *(gpio_map+PULLUPDN_OFFSET) = (*(gpio_map+PULLUPDN_OFFSET) & ~3) | PUD_UP;
-    else  // pud == PUD_OFF
-       *(gpio_map+PULLUPDN_OFFSET) &= ~3;
-    
-    short_wait();
-    *(gpio_map+clk_offset) = 1 << shift;
-    short_wait();
-    *(gpio_map+PULLUPDN_OFFSET) &= ~3;
-    *(gpio_map+clk_offset) = 0;
+    // Check GPIO register
+    int is2711 = *(gpio_map+PULLUPDN_OFFSET_2711_3) != 0x6770696f;
+    if (is2711) {
+        // Pi 4 Pull-up/down method
+       int pullreg = PULLUPDN_OFFSET_2711_0 + (gpio >> 4);
+       int pullshift = (gpio & 0xf) << 1;
+       unsigned int pullbits;
+       unsigned int pull = 0;
+       if (pud == PUD_DOWN){
+           pull = 2;
+        } else
+        if (pud == PUD_UP){
+           pull = 1;
+        }
+        pullbits = *(gpio_map + pullreg);
+        pullbits &= ~(3 << pullshift);
+        pullbits |= (pull << pullshift);
+        *(gpio_map + pullreg) = pullbits;
+    }
+    else
+    {
+        // Legacy Pull-up/down method
+        int clk_offset = PULLUPDNCLK_OFFSET + (gpio/32);
+        int shift = (gpio%32);
+
+        if (pud == PUD_DOWN)
+            *(gpio_map+PULLUPDN_OFFSET) = (*(gpio_map+PULLUPDN_OFFSET) & ~3) | PUD_DOWN;
+        else if (pud == PUD_UP)
+            *(gpio_map+PULLUPDN_OFFSET) = (*(gpio_map+PULLUPDN_OFFSET) & ~3) | PUD_UP;
+        else  // pud == PUD_OFF
+            *(gpio_map+PULLUPDN_OFFSET) &= ~3;
+
+        short_wait();
+        *(gpio_map+clk_offset) = 1 << shift;
+        short_wait();
+        *(gpio_map+PULLUPDN_OFFSET) &= ~3;
+        *(gpio_map+clk_offset) = 0;
+    }
 }
 
 //updated Eric PTAK - trouch.com
diff -urN WebIOPi-0.7.1org/python/webiopi/devices/bus.py WebIOPi-0.7.1/python/webiopi/devices/bus.py
--- WebIOPi-0.7.1org/python/webiopi/devices/bus.py	2013-04-18 06:41:06.000000000 +0900
+++ WebIOPi-0.7.1/python/webiopi/devices/bus.py	2023-11-18 16:44:02.767484396 +0900
@@ -15,12 +15,18 @@
 import os
 import time
 import subprocess
+import platform
 
 from webiopi.utils.logger import debug, info
 
+PLATFORM = ["bcm2708", "bcm2835"] 
+KVER = platform.release().split(".")
+V = 1
+if int(KVER[0]) == 4 and int(KVER[1]) < 5:
+    V = 0
 BUSLIST = {
-    "I2C": {"enabled": False, "gpio": {0:"SDA", 1:"SCL", 2:"SDA", 3:"SCL"}, "modules": ["i2c-bcm2708", "i2c-dev"]},
-    "SPI": {"enabled": False, "gpio": {7:"CE1", 8:"CE0", 9:"MISO", 10:"MOSI", 11:"SCLK"}, "modules": ["spi-bcm2708", "spidev"]},
+    "I2C": {"enabled": False, "gpio": {0:"SDA", 1:"SCL", 2:"SDA", 3:"SCL"}, "modules": ["i2c-" + PLATFORM[V], "i2c-dev"]},
+    "SPI": {"enabled": False, "gpio": {7:"CE1", 8:"CE0", 9:"MISO", 10:"MOSI", 11:"SCLK"}, "modules": ["spi-" + PLATFORM[V], "spidev"]},
     "UART": {"enabled": False, "gpio": {14:"TX", 15:"RX"}},
     "ONEWIRE": {"enabled": False, "gpio": {4:"DATA"}, "modules": ["w1-gpio"], "wait": 2}
 }
diff -urN WebIOPi-0.7.1org/python/webiopi/protocols/http.py WebIOPi-0.7.1/python/webiopi/protocols/http.py
--- WebIOPi-0.7.1org/python/webiopi/protocols/http.py	2014-02-22 07:31:18.000000000 +0900
+++ WebIOPi-0.7.1/python/webiopi/protocols/http.py	2023-11-18 16:44:02.767484396 +0900
@@ -194,13 +194,23 @@
         
         (contentType, encoding) = mime.guess_type(path)
         f = codecs.open(path, encoding=encoding)
-        data = f.read()
+        try:
+            data = f.read()
+        except UnicodeDecodeError:
+            f.close()
+            f = codecs.open(path, mode='rb', encoding=encoding)
+            data = f.read()
         f.close()
         self.send_response(200)
         self.send_header("Content-Type", contentType);
-        self.send_header("Content-Length", os.path.getsize(realPath))
-        self.end_headers()
-        self.wfile.write(data)
+        try:
+            self.send_header("Content-Length", len(data.encode()))
+            self.end_headers()
+            self.wfile.write(data.encode())
+        except AttributeError:
+            self.send_header("Content-Length", os.path.getsize(realPath))
+            self.end_headers()
+            self.wfile.write(data)
         self.logRequest(200)
         
     def processRequest(self):
diff -urN WebIOPi-0.7.1org/python/webiopi/protocols/rest.py WebIOPi-0.7.1/python/webiopi/protocols/rest.py
--- WebIOPi-0.7.1org/python/webiopi/protocols/rest.py	2013-04-18 06:41:06.000000000 +0900
+++ WebIOPi-0.7.1/python/webiopi/protocols/rest.py	2023-11-18 16:44:02.771484309 +0900
@@ -161,6 +161,12 @@
             revision = "%s" % BOARD_REVISION
             return (200, revision, M_PLAIN)
 
+        # Raspi info
+        elif relativePath == "rpi_info":
+            json = "%s" % GPIO.RPI_INFO
+            RPI_INFO = json.replace("'", '"')
+            return (200, RPI_INFO, M_JSON)
+
         # Single GPIO getter
         elif relativePath.startswith("GPIO/"):
             return self.callDeviceFunction("GET", relativePath)
diff -urN WebIOPi-0.7.1org/python/webiopi/utils/thread.py WebIOPi-0.7.1/python/webiopi/utils/thread.py
--- WebIOPi-0.7.1org/python/webiopi/utils/thread.py	2013-04-18 06:41:06.000000000 +0900
+++ WebIOPi-0.7.1/python/webiopi/utils/thread.py	2023-11-18 16:44:02.771484309 +0900
@@ -33,14 +33,14 @@
             task.stop()
                 
 
-def runLoop(func=None, async=False):
+def runLoop(func=None, l_async=False):
     global RUNNING
     RUNNING = True
     signal.signal(signal.SIGINT, stop)
     signal.signal(signal.SIGTERM, stop)
 
     if func != None:
-        if async:
+        if l_async:
             TASKS.append(Task(func, True))
         else:
             while RUNNING:
diff -urN WebIOPi-0.7.1org/python/webiopi/utils/version.py WebIOPi-0.7.1/python/webiopi/utils/version.py
--- WebIOPi-0.7.1org/python/webiopi/utils/version.py	2015-02-05 05:21:44.000000000 +0900
+++ WebIOPi-0.7.1/python/webiopi/utils/version.py	2023-11-18 16:44:02.771484309 +0900
@@ -1,14 +1,15 @@
 import re
 import sys
 
-VERSION         = '0.7.1'
+VERSION         = '0.7.1a'
 VERSION_STRING  = "WebIOPi/%s/Python%d.%d" % (VERSION, sys.version_info.major, sys.version_info.minor)
 PYTHON_MAJOR    = sys.version_info.major
 BOARD_REVISION  = 0
 
-_MAPPING = [[], [], []]
+_MAPPING = [[], [], [], []]
 _MAPPING[1] = ["V33", "V50", 0, "V50", 1, "GND", 4, 14, "GND", 15, 17, 18, 21, "GND", 22, 23, "V33", 24, 10, "GND", 9, 25, 11, 8, "GND", 7]
 _MAPPING[2] = ["V33", "V50", 2, "V50", 3, "GND", 4, 14, "GND", 15, 17, 18, 27, "GND", 22, 23, "V33", 24, 10, "GND", 9, 25, 11, 8, "GND", 7]
+_MAPPING[3] = ["V33", "V50", 2, "V50", 3, "GND", 4, 14, "GND", 15, 17, 18, 27, "GND", 22, 23, "V33", 24, 10, "GND", 9, 25, 11, 8, "GND", 7, "DNC", "DNC" , 5, "GND", 6, 12, 13, "GND", 19, 16, 26, 20, "GND", 21]
 
 
 try:
@@ -21,8 +22,13 @@
             if hex_cpurev.startswith("1000"):
                 hex_cpurev = hex_cpurev[-4:]
             cpurev = int(hex_cpurev, 16)
-            BOARD_REVISION = 1 if (cpurev < 4) else 2
-        
+            if 0 < cpurev < 4:
+              BOARD_REVISION = 1
+            elif 3 < cpurev < 16:
+              BOARD_REVISION = 2
+            else:
+              BOARD_REVISION = 3
+
 except:
     pass
 
diff -urN WebIOPi-0.7.1org/setup.sh WebIOPi-0.7.1/setup.sh
--- WebIOPi-0.7.1org/setup.sh	2015-02-05 05:21:44.000000000 +0900
+++ WebIOPi-0.7.1/setup.sh	2023-11-18 16:44:02.771484309 +0900
@@ -79,6 +79,14 @@
 echo "Copying HTML resources..."
 mkdir /usr/share/webiopi 2>/dev/null 1>/dev/null
 cp -rfv htdocs /usr/share/webiopi
+rev16=`awk '/Revision/{printf("0x%s", substr($3, 3))}' /proc/cpuinfo`
+rev=`printf "%d\n" $rev16`
+if [ $rev -lt 16 ]; then
+	pin_val=26
+else
+	pin_val=40
+fi
+sed -i "s/\(^var _pins = \)[0-9].;/\1${pin_val};/" /usr/share/webiopi/htdocs/webiopi.js
 echo
 
 # Add config file if it does not exist
